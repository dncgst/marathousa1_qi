# fitting a variogram
UB5a_surf.var <- gstat::variogram(z^2~1, UB5a_surf) # calculates sample variogram values
plot(UB5a_surf.var)
# fitting a variogram
UB5a_surf.var <- gstat::variogram(z~1, UB5a_surf) # calculates sample variogram values
plot(UB5a_surf.var)
show.vgms
vgm
gstat::vgm
gstat::vgm()
gstat::show.vgms()
# fitting a variogram
UB5a_surf.var <- gstat::variogram(z~1, UB5a_surf, cutoff=0.5, width=0.1) # calculates sample variogram values
plot(UB5a_surf.var)
# fitting a variogram
UB5a_surf.var <- gstat::variogram(z~1, UB5a_surf, cutoff=0.5) # calculates sample variogram values
plot(UB5a_surf.var)
# fitting a variogram
UB5a_surf.var <- gstat::variogram(z~1, UB5a_surf, cutoff=0.5, width=1) # calculates sample variogram values
plot(UB5a_surf.var)
# fitting a variogram
UB5a_surf.var <- gstat::variogram(z~1, UB5a_surf, cutoff=.5, width=.1) # calculates sample variogram values
plot(UB5a_surf.var)
# fitting a variogram
UB5a_surf.var <- gstat::variogram(z~1, UB5a_surf, cutoff=.5) # calculates sample variogram values
plot(UB5a_surf.var)
# fitting a variogram
UB5a_surf.var <- gstat::variogram(z~1, UB5a_surf, cutoff=1) # calculates sample variogram values
plot(UB5a_surf.var)
?spDists
# what's the max distance between points
spDists(UB5a_surf)
# what's the max distance between points
max(spDists(UB5a_surf))
min(spDists(UB5a_surf))
# what's the max/min distance between points
max(spDists(UB5a_surf))/3
# fitting a variogram
## cutoff: spatial separation distance up to which point pairs are included in semivariance estimates; as a default, the length of the diagonal of the box spanning the data is divided by three.
## width: the width of subsequent distance intervals into which data point pairs are grouped for semivariance estimates
UB5a_surf.var <- gstat::variogram(z~1, UB5a_surf, cutoff=2) # calculates sample variogram values
plot(UB5a_surf.var)
# fitting a variogram
## cutoff: spatial separation distance up to which point pairs are included in semivariance estimates; as a default, the length of the diagonal of the box spanning the data is divided by three.
## width: the width of subsequent distance intervals into which data point pairs are grouped for semivariance estimates
UB5a_surf.var <- gstat::variogram(z~1, UB5a_surf, cutoff=5) # calculates sample variogram values
plot(UB5a_surf.var)
plot(UB5a_surf); plot(bbox(UB5a_surf), add=TRUE)
bbox(UB5a_surf)
plot(UB5a_surf); plot(unitsB_2015.shp, add=TRUE)
# fitting a variogram
## cutoff: spatial separation distance up to which point pairs are included in semivariance estimates; as a default, the length of the diagonal of the box spanning the data is divided by three.
## width: the width of subsequent distance intervals into which data point pairs are grouped for semivariance estimates
UB5a_surf.var <- gstat::variogram(z~1, UB5a_surf, cutoff=2)
plot(UB5a_surf.var)
# fitting a variogram
## cutoff: spatial separation distance up to which point pairs are included in semivariance estimates; as a default, the length of the diagonal of the box spanning the data is divided by three.
## width: the width of subsequent distance intervals into which data point pairs are grouped for semivariance estimates
UB5a_surf.var <- gstat::variogram(z~1, UB5a_surf, cutoff=1)
plot(UB5a_surf.var)
# fitting a variogram
## cutoff: spatial separation distance up to which point pairs are included in semivariance estimates; as a default, the length of the diagonal of the box spanning the data is divided by three.
## width: the width of subsequent distance intervals into which data point pairs are grouped for semivariance estimates
UB5a_surf.var <- gstat::variogram(z~1, UB5a_surf, cutoff=2)
plot(UB5a_surf.var)
# fitting a variogram
## cutoff: spatial separation distance up to which point pairs are included in semivariance estimates; as a default, the length of the diagonal of the box spanning the data is divided by three.
## width: the width of subsequent distance intervals into which data point pairs are grouped for semivariance estimates
UB5a_surf.var <- gstat::variogram(z~1, UB5a_surf, cutoff=3)
plot(UB5a_surf.var)
# fitting a variogram
## cutoff: spatial separation distance up to which point pairs are included in semivariance estimates; as a default, the length of the diagonal of the box spanning the data is divided by three.
## width: the width of subsequent distance intervals into which data point pairs are grouped for semivariance estimates
UB5a_surf.var <- gstat::variogram(z~1, UB5a_surf, cutoff=4)
plot(UB5a_surf.var)
# fitting a variogram
## cutoff: spatial separation distance up to which point pairs are included in semivariance estimates; as a default, the length of the diagonal of the box spanning the data is divided by three.
## width: the width of subsequent distance intervals into which data point pairs are grouped for semivariance estimates
UB5a_surf.var <- gstat::variogram(z~1, UB5a_surf, cutoff=5)
plot(UB5a_surf.var)
# fitting a variogram
## cutoff: spatial separation distance up to which point pairs are included in semivariance estimates; as a default, the length of the diagonal of the box spanning the data is divided by three.
## width: the width of subsequent distance intervals into which data point pairs are grouped for semivariance estimates
UB5a_surf.var <- gstat::variogram(z~1, UB5a_surf, cutoff=.5)
plot(UB5a_surf.var)
# fitting a variogram
## cutoff: spatial separation distance up to which point pairs are included in semivariance estimates; as a default, the length of the diagonal of the box spanning the data is divided by three.
## width: the width of subsequent distance intervals into which data point pairs are grouped for semivariance estimates
UB5a_surf.var <- gstat::variogram(z~1, UB5a_surf, cutoff=2)
plot(UB5a_surf.var)
gstat::vgm()
gstat::show.vgms()
?vgm
UB5a_surf.fit <- gstat::fit.variogram(UB5a_surf.var, model=vgm(.8, "Sph", .001))
UB5a_surf.fit <- gstat::fit.variogram(UB5a_surf.var, model=gstat::vgm(.8, "Sph", .001))
UB5a_surf.mod <- gstat::vgm(psill=.003, model="Sph", range=.8, nugget=.0008)
UB5a_surf.fit <- gstat::fit.variogram(UB5a_surf.var, model=UB5a_surf.mod)
plot(UB5a_surf.var, UB5a_surf.fit)
UB5a_surf.fit
# spatial grid
str(unitsB_2015.shp)
unitsB_2015.grid <- as(unitsB_2015.shp, "SpatialGridDataFrame")
unitsB_2015.grid <- as(unitsB_2015.shp, "SpatialPixels")
?spsample
unitsB_2015.grid <- spsample(unitsB_2015.shp, type="regular", cellsize=.01)
plot(unitsB_2015.grid)
str(unitsB_2015.grid)
unitsB_2015.grid <- as(unitsB_2015.grid, "SpatialPixels")
str(unitsB_2015.grid)
UB5a_surf.ok <- gstat::krige(z~1, UB5a_surf, unitsB_2015.grid, UB5a_surf.fit)
plot(UB5a_surf.ok)
?makegrid
# spatial grid (method 2)
unitsB_2015.grid2 <- makegrid(unitsB_2015.shp, type="regular", cellsize=.01)
# spatial grid (method 2)
unitsB_2015.grid2 <- makegrid(unitsB_2015.shp, cellsize=.01)
unitsB_2015.grid2
str(unitsB_2015.grid2)
colnames(unitsB_2015.grid2) <- c('x','y')
str(unitsB_2015.grid2)
str(unitsB_2015.grid)
outline <- unitsB_2015.shp@polygons[[2]]@Polygons[[1]]@coords
require(splancs)
unitsB_2015.grid2 <- unitsB_2015.grid2[inout(unitsB_2015.grid2,outline), ]
plot(unitsB_2015.grid2)
# spatial grid (method 1)
str(unitsB_2015.shp)
unitsB_2015.grid <- spsample(unitsB_2015.shp, type="regular", cellsize=.01)
str(unitsB_2015.grid)
colnames(unitsB_2015.grid2) <- c("x","y")
str(unitsB_2015.grid)
# spatial grid (method 2)
unitsB_2015.grid2 <- makegrid(unitsB_2015.shp, cellsize=.01)
str(unitsB_2015.grid2)
unitsB_2015.grid <- spsample(unitsB_2015.shp, type="regular", cellsize=.01)
unitsB_2015.grid <- spsample(unitsB_2015.shp, type="regular", cellsize=.1)
str(unitsB_2015.grid)
plot(unitsB_2015.grid)
plot(unitsB_2015.grid)
str(unitsB_2015.grid)
unitsB_2015.grid <- as(unitsB_2015.grid, "SpatialPixels")
## ordinary kriging
UB5a_surf.ok <- gstat::krige(z~1, UB5a_surf, unitsB_2015.grid, UB5a_surf.fit)
plot(UB5a_surf.ok)
str(UB5a_surf.ok)
str(UB5a_surf.idw)
class(UB5a_surf.idw)
w <- as.owin(unitsB_2015.shp)
#plot(UB5a_surf.idw, axes=TRUE, main="b"); plot(w, add=TRUE)
plot(UB5a_surf.ok, axes=TRUE, main="b"); plot(w, add=TRUE)
GISTools::north.arrow(xb=933, yb=610, len=0.1, lab="N", cex.lab=1)
GISTools::map.scale(xc=933.5, yc=608.5, len=1, units="meter", ndivs=1)
# convert SpatialPixelsDataFrame to im
UB5a_surf.ok.im <- as.im(UB5a_surf.ok)
# convert SpatialPixelsDataFrame to im
UB5a_surf.ok.im <- as.im.data.frame(UB5a_surf.ok)
str(UB5a_surf.ok)
# convert SpatialPixelsDataFrame to raster -> im
UB5a_surf.ok.im <- as(UB5a_surf.ok, "im")
# convert SpatialPixelsDataFrame to raster -> im
UB5a_surf.ok.im <- spatstat::as.im(UB5a_surf.ok)
# convert SpatialPixelsDataFrame to im
UB5a_surf.ok <- as(UB5a_surf.ok, "SpatialGridDataFrame")
UB5a_surf.ok.im <- as(UB5a_surf.ok, "im")
str(UB5a_surf.ok.im)
plot(UB5a_surf.ok.im)
plot(UB5a_surf.ok.im)
#plot(UB5a_surf.idw, axes=TRUE, main="b"); plot(w, add=TRUE)
plot(UB5a_surf.ok.im, axes=TRUE, main="b"); plot(w, add=TRUE)
GISTools::north.arrow(xb=933, yb=610, len=0.1, lab="N", cex.lab=1)
GISTools::map.scale(xc=933.5, yc=608.5, len=1, units="meter", ndivs=1)
setEPS()
pdf("./doc/artwork/Fig4.pdf", width=7.48, height=3.48)
par(mfcol=c(1,3), ps=7, cex=1, cex.main=2, cex.axis=1, cex.lab=1)
w <- as.owin(unitsA_2015.shp)
plot(UA4_surf.idw, axes=TRUE, main="a"); plot(w, add=TRUE)
library(GISTools)
GISTools::north.arrow(xb=937.5, yb=677.5, len=0.05, lab="N", cex.lab=1)
GISTools::map.scale(xc=938.5, yc=677.5, len=1, units="meter", ndivs=1)
w <- as.owin(unitsB_2015.shp)
#plot(UB5a_surf.idw, axes=TRUE, main="b"); plot(w, add=TRUE)
plot(UB5a_surf.ok.im, axes=TRUE, main="b"); plot(w, add=TRUE)
GISTools::north.arrow(xb=933, yb=610, len=0.1, lab="N", cex.lab=1)
GISTools::map.scale(xc=933.5, yc=608.5, len=1, units="meter", ndivs=1)
z <- 2 * volcano        # Exaggerate the relief
x <- 10 * (1:nrow(z))   # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z))   # 10 meter spacing (E to W)
persp(x, y, z, theta=135, phi=10, col="gray", scale=FALSE,
ltheta=-120, shade=0.75, border=NA, box=FALSE, main="c")
dev.off()
30/7.48
?par
setEPS()
pdf("./doc/artwork/Fig4.pdf", width=30, height=10)
par(mfcol=c(1,3), ps=28, cex=1, cex.main=2, cex.axis=1, cex.lab=1)
w <- as.owin(unitsA_2015.shp)
plot(UA4_surf.idw, axes=TRUE, main="a"); plot(w, add=TRUE)
library(GISTools)
GISTools::north.arrow(xb=937.5, yb=677.5, len=0.05, lab="N", cex.lab=1)
GISTools::map.scale(xc=938.5, yc=677.5, len=1, units="meter", ndivs=1)
w <- as.owin(unitsB_2015.shp)
#plot(UB5a_surf.idw, axes=TRUE, main="b"); plot(w, add=TRUE)
plot(UB5a_surf.ok.im, axes=TRUE, main="b"); plot(w, add=TRUE)
GISTools::north.arrow(xb=933, yb=610, len=0.1, lab="N", cex.lab=1)
GISTools::map.scale(xc=933.5, yc=608.5, len=1, units="meter", ndivs=1)
z <- 2 * volcano        # Exaggerate the relief
x <- 10 * (1:nrow(z))   # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z))   # 10 meter spacing (E to W)
persp(x, y, z, theta=135, phi=10, col="gray", scale=FALSE,
ltheta=-120, shade=0.75, border=NA, box=FALSE, main="c")
dev.off()
3.54*4
setEPS()
pdf("./doc/artwork/Fig4.pdf")#, width=30, height=10)
par(mfcol=c(1,3))#, ps=28, cex=1, cex.main=1, cex.axis=1, cex.lab=1)
w <- as.owin(unitsA_2015.shp)
plot(UA4_surf.idw, axes=TRUE, main="a"); plot(w, add=TRUE)
library(GISTools)
GISTools::north.arrow(xb=937.5, yb=677.5, len=0.05, lab="N", cex.lab=1)
GISTools::map.scale(xc=938.5, yc=677.5, len=1, units="meter", ndivs=1)
w <- as.owin(unitsB_2015.shp)
#plot(UB5a_surf.idw, axes=TRUE, main="b"); plot(w, add=TRUE)
plot(UB5a_surf.ok.im, axes=TRUE, main="b"); plot(w, add=TRUE)
GISTools::north.arrow(xb=933, yb=610, len=0.1, lab="N", cex.lab=1)
GISTools::map.scale(xc=933.5, yc=608.5, len=1, units="meter", ndivs=1)
z <- 2 * volcano        # Exaggerate the relief
x <- 10 * (1:nrow(z))   # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z))   # 10 meter spacing (E to W)
persp(x, y, z, theta=135, phi=10, col="gray", scale=FALSE,
ltheta=-120, shade=0.75, border=NA, box=FALSE, main="c")
dev.off()
setEPS()
pdf("./doc/artwork/Fig4.pdf", width=30, height=10)
par(mfcol=c(1,3), ps=28, cex=1, cex.main=1, cex.axis=1, cex.lab=1)
w <- as.owin(unitsA_2015.shp)
plot(UA4_surf.idw, axes=TRUE, main="a"); plot(w, add=TRUE)
library(GISTools)
GISTools::north.arrow(xb=937.5, yb=677.5, len=0.05, lab="N", cex.lab=1)
GISTools::map.scale(xc=938.5, yc=677.5, len=1, units="meter", ndivs=1)
w <- as.owin(unitsB_2015.shp)
#plot(UB5a_surf.idw, axes=TRUE, main="b"); plot(w, add=TRUE)
plot(UB5a_surf.ok.im, axes=TRUE, main="b"); plot(w, add=TRUE)
GISTools::north.arrow(xb=933, yb=610, len=0.1, lab="N", cex.lab=1)
GISTools::map.scale(xc=933.5, yc=608.5, len=1, units="meter", ndivs=1)
z <- 2 * volcano        # Exaggerate the relief
x <- 10 * (1:nrow(z))   # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z))   # 10 meter spacing (E to W)
persp(x, y, z, theta=135, phi=10, col="gray", scale=FALSE,
ltheta=-120, shade=0.75, border=NA, box=FALSE, main="c")
dev.off()
# read selection of surface points, Area A
UA4_surf <- read.csv("data/UA4_surf.csv", header=TRUE, sep=",", skip=0)
# convert to spatial.points.dataframe
coordinates(UA4_surf) <- ~x+y
proj4string(UA4_surf) <- CRS(as.character(NA))
bbox(UA4_surf)
str(UA4_surf)
plot(UA4_surf); plot(unitsA_2015.shp, add=TRUE)
# sample variogram
## cutoff: spatial separation distance up to which point pairs are included in semivariance estimates; as a default, the length of the diagonal of the box spanning the data is divided by three.
## width: the width of subsequent distance intervals into which data point pairs are grouped for semivariance estimates
UA4_surf.var <- gstat::variogram(z~1, UA4_surf, cutoff=2)
plot(UA4_surf.var)
# sample variogram
## cutoff: spatial separation distance up to which point pairs are included in semivariance estimates; as a default, the length of the diagonal of the box spanning the data is divided by three.
## width: the width of subsequent distance intervals into which data point pairs are grouped for semivariance estimates
UA4_surf.var <- gstat::variogram(z~1, UA4_surf)
plot(UA4_surf.var)
UA4_surf.var <- gstat::variogram(z~1, UA4_surf, cutoff=2.5)
plot(UA4_surf.var)
# sample variogram
## cutoff: spatial separation distance up to which point pairs are included in semivariance estimates; as a default, the length of the diagonal of the box spanning the data is divided by three.
## width: the width of subsequent distance intervals into which data point pairs are grouped for semivariance estimates
UA4_surf.var <- gstat::variogram(z~1, UA4_surf)
#UA4_surf.var <- gstat::variogram(z~1, UA4_surf, cutoff=2)
plot(UA4_surf.var)
gstat::show.vgms()
UA4_surf.mod1 <- gstat::vgm(psill=.004, model="Wav", range=2, nugget=.001)
UA4_surf.fit <- gstat::fit.variogram(UA4_surf.var, model=UA4_surf.mod1)
plot(UA4_surf.var, UA4_surf.fit)
UA4_surf.fit
UA4_surf.mod2 <- gstat::vgm(psill=.004, model="Gau", range=2, nugget=.001)
UA4_surf.fit <- gstat::fit.variogram(UA4_surf.var, model=UA4_surf.mod2)
plot(UA4_surf.var, UA4_surf.fit)
UA4_surf.fit <- gstat::fit.variogram(UA4_surf.var, model=UA4_surf.mod1)
UA4_surf.fit <- gstat::fit.variogram(UA4_surf.var, model=UA4_surf.mod2)
UA4_surf.fit <- gstat::fit.variogram(UA4_surf.var, model=UA4_surf.mod1)
plot(UA4_surf.var, UA4_surf.fit)
# spatial grid
str(unitsA_2015.shp)
unitsA_2015.grid <- spsample(unitsA_2015.shp, type="regular", cellsize=.1)
str(unitsA_2015.grid)
plot(unitsA_2015.grid)
unitsA_2015.grid <- as(unitsA_2015.grid, "SpatialPixels")
# spatial prediction
## ordinary kriging
UA4_surf.ok <- gstat::krige(z~1, UA4_surf, unitsA_2015.grid, UA4_surf.fit)
plot(UA4_surf.ok)
str(UA4_surf.ok)
# model diagnostics
UA4_surf.cv <- gstat::krige.cv(z~1, UA4_surf, UA4_surf.mod1, nfold=5)
bubble(UA4_surf.cv, "residuals", main="5-fold CV residuals")
UA4_surf.cv
bubble(UA4_surf.cv, "residual", main="5-fold CV residuals")
# model diagnostics
UB5a_surf.cv <- gstat::krige.cv(z~1, UB5a_surf, UB5a_surf.mod, nfold=5)
bubble(UB5a_surf.cv, "residual", main="5-fold CV residuals")
summary(UB5a_surf.cv)
summary(UA4_surf.cv)
# convert SpatialPixelsDataFrame to im
UA4_surf.ok <- as(UA4_surf.ok, "SpatialGridDataFrame")
UA4_surf.ok.im <- as(UA4_surf.ok, "im")
str(UA4_surf.ok.im)
plot(UA4_surf.ok.im)
plot(UA4_surf.ok.im)
setEPS()
pdf("./doc/artwork/Fig4.pdf", width=30, height=10)
par(mfcol=c(1,3), ps=28, cex=1, cex.main=1, cex.axis=1, cex.lab=1)
w <- as.owin(unitsA_2015.shp)
plot(UA4_surf.idw, axes=TRUE, main="a"); plot(w, add=TRUE)
library(GISTools)
GISTools::north.arrow(xb=937.5, yb=677.5, len=0.05, lab="N", cex.lab=1)
GISTools::map.scale(xc=938.5, yc=677.5, len=1, units="meter", ndivs=1)
w <- as.owin(unitsB_2015.shp)
#plot(UB5a_surf.idw, axes=TRUE, main="b"); plot(w, add=TRUE)
plot(UB5a_surf.ok.im, axes=TRUE, main="b"); plot(w, add=TRUE)
GISTools::north.arrow(xb=933, yb=610, len=0.1, lab="N", cex.lab=1)
GISTools::map.scale(xc=933.5, yc=608.5, len=1, units="meter", ndivs=1)
z <- 2 * volcano        # Exaggerate the relief
x <- 10 * (1:nrow(z))   # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z))   # 10 meter spacing (E to W)
persp(x, y, z, theta=135, phi=10, col="gray", scale=FALSE,
ltheta=-120, shade=0.75, border=NA, box=FALSE, main="c")
dev.off()
setEPS()
#postscript("./doc/artwork/Fig4.eps", width=10, height=10)
pdf("./doc/artwork/Fig4.pdf", width=30, height=10)
par(mfcol=c(1,3), ps=28, cex=1, cex.main=1, cex.axis=1, cex.lab=1)
w <- as.owin(unitsA_2015.shp)
plot(UA4_surf.ok.im, axes=TRUE, main="a"); plot(w, add=TRUE)
library(GISTools)
GISTools::north.arrow(xb=937.5, yb=677.5, len=0.05, lab="N", cex.lab=1)
GISTools::map.scale(xc=938.5, yc=677.5, len=1, units="meter", ndivs=1)
w <- as.owin(unitsB_2015.shp)
#plot(UB5a_surf.idw, axes=TRUE, main="b"); plot(w, add=TRUE)
plot(UB5a_surf.ok.im, axes=TRUE, main="b"); plot(w, add=TRUE)
GISTools::north.arrow(xb=933, yb=610, len=0.1, lab="N", cex.lab=1)
GISTools::map.scale(xc=933.5, yc=608.5, len=1, units="meter", ndivs=1)
z <- 2 * volcano        # Exaggerate the relief
x <- 10 * (1:nrow(z))   # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z))   # 10 meter spacing (E to W)
persp(x, y, z, theta=135, phi=10, col="gray", scale=FALSE,
ltheta=-120, shade=0.75, border=NA, box=FALSE, main="c")
dev.off()
setEPS()
postscript("./doc/artwork/Fig4.eps", width=30, height=10)
par(mfcol=c(1,3), ps=28, cex=1, cex.main=1, cex.axis=1, cex.lab=1)
w <- as.owin(unitsA_2015.shp)
plot(UA4_surf.ok.im, axes=TRUE, main="a"); plot(w, add=TRUE)
library(GISTools)
GISTools::north.arrow(xb=937.5, yb=677.5, len=0.05, lab="N", cex.lab=1)
GISTools::map.scale(xc=938.5, yc=677.5, len=1, units="meter", ndivs=1)
w <- as.owin(unitsB_2015.shp)
#plot(UB5a_surf.idw, axes=TRUE, main="b"); plot(w, add=TRUE)
plot(UB5a_surf.ok.im, axes=TRUE, main="b"); plot(w, add=TRUE)
GISTools::north.arrow(xb=933, yb=610, len=0.1, lab="N", cex.lab=1)
GISTools::map.scale(xc=933.5, yc=608.5, len=1, units="meter", ndivs=1)
z <- 2 * volcano        # Exaggerate the relief
x <- 10 * (1:nrow(z))   # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z))   # 10 meter spacing (E to W)
persp(x, y, z, theta=135, phi=10, col="gray", scale=FALSE,
ltheta=-120, shade=0.75, border=NA, box=FALSE, main="c")
dev.off()
# reproducible research from here...
getwd()
setwd("/home/dncgst/projects/marathousa1_qi")
Xa <- read.csv("data/Xa.csv", header=TRUE, sep=",", skip=0)
Xb <- read.csv("data/Xb.csv", header=TRUE, sep=",", skip=0)
Elephas.ppp <- read.csv("data/Elephas.ppp.csv", header=TRUE, sep=",", skip=0)
# subset points until 2015
summary(Xa)
Xa$date <- as.Date(Xa$date, format="%Y-%m-%d")
library(dplyr)
Xa <- dplyr::filter(Xa, date < as.Date("2016-01-01"))
# convert dataframe to ppp, Area A
w <- as.owin(unitsA_2015.shp)
names(Xa)
m <- Xa[,3:14]
Xa.ppp <- ppp(Xa$x, Xa$y, window=w, marks=m)
unitname(Xa.ppp) <- c("meter","meters")
summary(Xa.ppp)
## remove rejected points
Xa.ppp <- as.ppp(Xa.ppp)
any(duplicated(Xa.ppp))
## plot
plot(Xa.ppp$x, Xa.ppp$y, axes=TRUE, asp=1); plot(w, add=TRUE)
plot(Xa.ppp$marks$class, main="Distribution of remains from area A")
plot(droplevels(Xa.ppp$marks$geo_takis), main="Distribution of remains from area A")
# calculate minimum distance?  Difficult to quantify due to its not sharp nature --> "Likewise, in Area A the relative vertical distribution of remains from UA3c was estimated relative to the absolute elevation of the elephant remains and the range of elevations of the UA3c/4 surface.""
summary(Xa.ppp)
S <- UA4_surf.ok.im[Xa.ppp]
summary(S)
d <- Xa.ppp$marks$z-S
Da <- cbind(as.data.frame(Xa.ppp), d)
summary(Da)
## UA3c
hist(0, prob=TRUE, xlim=c(348.5,350), ylim=c(0,4), xlab=" meters a.s.l.", main="")
rug(UA4_surf$marks, col="grey")
rect(xleft=quantile(UA4_surf$marks, .25), xright=quantile(UA4_surf$marks, .75), ybottom=0, ytop=7, col="grey", border=NA, lwd=2)
### Elephas
hist(Elephas.ppp$z, nclass=30, prob=TRUE, col=NA, add=TRUE)
### debris UA3c
rug(Da[which(Da$geo_takis == "UA3c" & Da$type == "debris"),]$z, col="#e41a1c", lwd=2)
lines(density(Da[which(Da$geo_takis == "UA3c" & Da$type == "debris"),]$z, bw="nrd"), col="#e41a1c", lwd=2)
abline(v=mean(Da[which(Da$geo_takis == "UA3c" & Da$type == "debris"),]$z), col="#e41a1c", lwd=1, lty=2)
### debitage UA3c
rug(Da[which(Da$geo_takis == "UA3c" & Da$type == "debitage"),]$z, col="#377eb8", lwd=2)
abline(v=mean(Da[which(Da$geo_takis == "UA3c" & Da$type == "debitage"),]$z), col="#377eb8", lwd=1, lty=2)
### tool UA3c
rug(Da[which(Da$geo_takis == "UA3c" & Da$type == "tool"),]$z, col="#4daf4a", lwd=2)
abline(v=mean(Da[which(Da$geo_takis == "UA3c" & Da$type == "tool"),]$z), col="#4daf4a", lwd=1, lty=2)
### fauna UA3c
lines(density(Da[which(Da$geo_takis == "UA3c" & Da$class == "Fauna"),]$z, bw="nrd"), col="#ff7f00", lwd=2)
abline(v=mean(Da[which(Da$geo_takis == "UA3c" & Da$class == "Fauna"),]$z), col="#ff7f00", lwd=1, lty=2)
### fauna UA4
lines(density(Da[which(Da$geo_takis == "UA4" & Da$class == "Fauna"),]$z, bw="nrd"), col="#ff7f00", lwd=2)
abline(v=mean(Da[which(Da$geo_takis == "UA4" & Da$class == "Fauna"),]$z), col="#ff7f00", lwd=1, lty=2)
legend(x="topright", c("UA3c/UA4 surface","debris/chip","flake","tool","fauna"), lty=1, lwd=2, col=c("grey","#e41a1c", "#377eb8", "#4daf4a", "#ff7f00"))
UA4_surf
# subset points until 2015
summary(Xb)
Xb$date <- as.Date(Xb$date, format="%Y-%m-%d")
library(dplyr)
Xb <- dplyr::filter(Xb, date < as.Date("2016-01-01"))
# convert dataframe to ppp, Area B
w <- as.owin(unitsB_2015.shp)
names(Xb)
m <- Xb[,3:14]
Xb.ppp <- ppp(Xb$x, Xb$y, window=w, marks=m)
unitname(Xb.ppp) <- c("meter","meters")
summary(Xb.ppp)
## remove rejected points
Xb.ppp <- as.ppp(Xb.ppp)
## deal with duplicated points
any(duplicated(Xb.ppp))
which(duplicated(Xb.ppp) == "TRUE")
Xb.ppp <- Xb.ppp[!duplicated(Xb.ppp)]
## plot
plot(Xb.ppp$x, Xb.ppp$y, axes=TRUE, asp=1); plot(w, add=TRUE)
plot(Xb.ppp$marks$class, main="Distribution of remains from area B")
plot(droplevels(Xb.ppp$marks$geo_takis), main="Distribution of remains from area A")
Xb.ppp
# extract surface elevation at X positions and calculate minimum distance
summary(Xb.ppp)
S <- UB5a_surf.ok.im[Xb.ppp]
summary(S)
d <- Xb.ppp$marks$z-S
Db <- cbind(as.data.frame(Xb.ppp), d)
summary(Db)
## UB5a
hist(Db[which(Db$geo_takis == "UB5a" & Db$d <= 0),]$d, nclass=5, prob=TRUE, xlim=c(-0.6,0.1), ylim=c(0,14), xlab="d (meters)", main="a")
rug(Db[which(Db$geo_takis == "UB5a" & Db$d <= 0 & Db$type == "debris"),]$d, col="#e41a1c", lwd=2)
lines(density(Db[which(Db$geo_takis == "UB5a" & Db$d <= 0 & Db$type == "debris"),]$d, bw="nrd"), col="#e41a1c", lwd=2)
abline(v=mean(Db[which(Db$geo_takis == "UB5a" & Db$d <= 0 & Db$type == "debris"),]$d), col="#e41a1c", lwd=1, lty=2)
rug(Db[which(Db$geo_takis == "UB5a" & Db$d <= 0 & Db$type == "debitage"),]$d, col="#377eb8", lwd=2)
lines(density(Db[which(Db$geo_takis == "UB5a" & Db$d <= 0 & Db$type == "debitage"),]$d, bw="nrd"), col="#377eb8", lwd=2)
abline(v=mean(Db[which(Db$geo_takis == "UB5a" & Db$d <= 0 & Db$type == "debitage"),]$d), col="#377eb8", lwd=1, lty=2)
rug(Db[which(Db$geo_takis == "UB5a" & Db$d <= 0 & Db$type == "tool"),]$d, col="#4daf4a", lwd=2)
lines(density(Db[which(Db$geo_takis == "UB5a" & Db$d <= 0 & Db$type == "tool"),]$d, bw="nrd"), col="#4daf4a", lwd=2)
abline(v=mean(Db[which(Db$geo_takis == "UB5a" & Db$d <= 0 & Db$type == "tool"),]$d), col="#4daf4a", lwd=1, lty=2)
lines(density(Db[which(Db$geo_takis == "UB5a" & Db$d <= 0 & Db$class == "Fauna"),]$d, bw="nrd"), col="#ff7f00", lwd=2)
abline(v=mean(Db[which(Db$geo_takis == "UB5a" & Db$d <= 0 & Db$class == "Fauna"),]$d), col="#ff7f00", lwd=1, lty=2)
legend(x="topright", c("debris","flake","tool","fossil"), lty=1, lwd=2, col=c("#e41a1c", "#377eb8", "#4daf4a", "#ff7f00"))
## UB4c
hist(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0),]$d, nclass=10, prob=TRUE, xlim=c(-0.1,0.6), ylim=c(0,7), xlab="d (meters)", main="UB4c")
rug(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0 & Db$type == "debris"),]$d, col="#e41a1c", lwd=2)
lines(density(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0 & Db$type == "debris"),]$d, bw="nrd"), col="#e41a1c", lwd=2)
abline(v=mean(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0 & Db$type == "debris"),]$d), col="#e41a1c", lwd=1, lty=2)
rug(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0 & Db$type == "debitage"),]$d, col="#377eb8", lwd=2)
lines(density(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0 & Db$type == "debitage"),]$d, bw="nrd"), col="#377eb8", lwd=2)
abline(v=mean(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0 & Db$type == "debitage"),]$d), col="#377eb8", lwd=1, lty=2)
rug(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0 & Db$type == "tool"),]$d, col="#4daf4a", lwd=2)
lines(density(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0 & Db$type == "tool"),]$d, bw="nrd"), col="#4daf4a", lwd=2)
abline(v=mean(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0 & Db$type == "tool"),]$d), col="#4daf4a", lwd=1, lty=2)
rug(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0 & Db$type == "core"),]$d, col="#984ea3", lwd=2)
lines(density(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0 & Db$type == "core"),]$d, bw="nrd"), col="#984ea3", lwd=2)
abline(v=mean(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0 & Db$type == "core"),]$d), col="#984ea3", lwd=1, lty=2)
lines(density(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0 & Db$class == "Fauna"),]$d, bw="nrd"), col="#ff7f00", lwd=2)
abline(v=mean(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0 & Db$class == "Fauna"),]$d), col="#ff7f00", lwd=1, lty=2)
legend(x="topright", c("debris","flake","tool","core","fossil"), lty=1, lwd=2, col=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
?hist
require(stats)
set.seed(14)
x <- rchisq(100, df = 4)
qqplot(x, qchisq(ppoints(x), df = 4)); abline(0, 1, col = 2, lty = 2)
## UB4c
hist(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0),]$d, nclass=10, prob=TRUE, xlim=c(-0.1,0.6), ylim=c(0,7), xlab="d (meters)", main="UB4c")
hist(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0),]$d)
hist(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0),]$d, horiz=TRUE)
barplot.default(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0),]$d, horiz=TRUE)
barplot(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0),]$d, horiz=TRUE)
hist(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0),]$d, horiz=TRUE)
hist(Db[which(Db$geo_takis == "UB4c" & Db$d >= 0),]$d, horiz=TRUE)
Db
class(Db)
UA3c.fabric
UA3c.fabric
summary(UA3c.fabric)
summary(UA4.fabric)
summary(Elephas.fabric)
summary(UB4c_clock.fabric)
summary(UB4c_comp.fabric)
