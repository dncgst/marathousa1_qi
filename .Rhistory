deg(circ.mean(rad(UB4c_test.fabric$plunge_clock)))
deg(circ.disp(rad(UB4c_test.fabric$plunge_clock)))
deg(circ.mean(rad(UB4c_test.fabric$bearing_comp)))
deg(circ.disp(rad(UB4c_test.fabric$bearing_comp)))
deg(circ.mean(rad(UB4c_test.fabric$plunge_comp)))
deg(circ.disp(rad(UB4c_test.fabric$plunge_comp)))
# uniformity tests
r.test(rad(UB4c_test.fabric$bearing_clock))
r.test(rad(UB4c_test.fabric$bearing_comp))
# mean
deg(circ.mean(rad(UB4c_test.fabric$bearing_clock)))
# mean
round(deg(circ.mean(rad(UB4c_test.fabric$bearing_clock))), 2)
# mean
round(deg(circ.mean(rad(UB4c_test.fabric$bearing_comp))), 2)
round(0.2759782, 3)
round(0.05437603, 3)
round(0.2427956, 3)
round(0.1060676, 3)
kuiper(rad(UB4c_test.fabric$bearing_clock))
watson(rad(UB4c_test.fabric$bearing_clock), dist="vm")
rao.spacing(rad(UB4c_test.fabric$bearing_clock))
kuiper(rad(UB4c_test.fabric$bearing_comp))
watson(rad(UB4c_test.fabric$bearing_comp))
rao.spacing(rad(UB4c_test.fabric$bearing_comp))
watson(rad(UB4c_test.fabric$bearing_comp), dist="vm")
watson(rad(UB4c_test.fabric$bearing_clock), dist="vm")
watson(rad(UB4c_test.fabric$bearing_comp), dist="vm")
rao.spacing(rad(UB4c_test.fabric$bearing_clock))
rao.spacing(rad(UB4c_test.fabric$bearing_comp))
watson(rad(UB4c_test.fabric$bearing_comp), dist="vm")
watson(rad(UB4c_test.fabric$bearing_comp), dist="vonmises")
watson(rad(UB4c_test.fabric$bearing_comp), dist="vonmises")
watson.test(rad(UB4c_test.fabric$bearing_comp), dist="vonmises")
bearing <- rad(Elephas.fabric$bearing)
## omnibus Watson test
## goodness of fit test for the von Mises (dist="vm") or circular uniform (dist="uniform") distribution
## If dist = 'vm', estimates of the population parameters are used to evaluate the von Mises distribution function at all data points, thereby arriving at a sample of approximately uniformly distributed data, if the original observations have a von Mises distribution. The one-sample Watson test is then applied to the transformed data as above.
watson(bearing, dist="uniform")
bearing <- rad(UA4.fabric$bearing)
## omnibus Watson test
## goodness of fit test for the von Mises (dist="vm") or circular uniform (dist="uniform") distribution
## If dist = 'vm', estimates of the population parameters are used to evaluate the von Mises distribution function at all data points, thereby arriving at a sample of approximately uniformly distributed data, if the original observations have a von Mises distribution. The one-sample Watson test is then applied to the transformed data as above.
watson(bearing, dist="uniform")
watson(bearing, dist="vm")
bearing <- rad(Elephas.fabric$bearing)
watson(bearing, dist="vm")
bearing <- rad(UA3c.fabric$bearing)
## omnibus Watson test
## goodness of fit test for the von Mises (dist="vm") or circular uniform (dist="uniform") distribution
## If dist = 'vm', estimates of the population parameters are used to evaluate the von Mises distribution function at all data points, thereby arriving at a sample of approximately uniformly distributed data, if the original observations have a von Mises distribution. The one-sample Watson test is then applied to the transformed data as above.
watson(bearing, dist="uniform")
bearing <- rad(UA4.fabric$bearing)
## omnibus Watson test
## goodness of fit test for the von Mises (dist="vm") or circular uniform (dist="uniform") distribution
## If dist = 'vm', estimates of the population parameters are used to evaluate the von Mises distribution function at all data points, thereby arriving at a sample of approximately uniformly distributed data, if the original observations have a von Mises distribution. The one-sample Watson test is then applied to the transformed data as above.
watson(bearing, dist="uniform")
bearing <- rad(Elephas.fabric$bearing)
## omnibus Watson test
## goodness of fit test for the von Mises (dist="vm") or circular uniform (dist="uniform") distribution
## If dist = 'vm', estimates of the population parameters are used to evaluate the von Mises distribution function at all data points, thereby arriving at a sample of approximately uniformly distributed data, if the original observations have a von Mises distribution. The one-sample Watson test is then applied to the transformed data as above.
watson(bearing, dist="uniform")
watson(rad(UB4c_test.fabric$bearing_clock), dist="uniform")
watson(rad(UB4c_test.fabric$bearing_comp), dist="uniform")
log(comp.s1_s2)
log(UB4c_comp.s1_s2)/log(UB4c_comp.s2_s3)
log(UB4c_clock.s1_s2)/log(UB4c_clock.s2_s3)
log(E.s1_s2)/log(E.s2_s3)
log(UA3c.s1_s2)/log(UA3c.s2_s3)
Da[which(Da$geo_takis == "UA3c" & Da$d >= 0 & Da$type == "debris"),]$d
Da[which(Da$geo_takis == "UA3c" & Da$d >= 0 & Da$type == "debitage"),]$d
Da[which(Da$geo_takis == "UA3c" & Da$type == "debitage"),]$d
Da[which(Da$geo_takis == "UA3c" & Da$type == "tool"),]$d
round(0.002893263,2)
round(0.002893263, digit=2)
round(0.002893263, digit=4)
round(0.002893263, digit=3)
round(0.002893263, digit=2)
round(0.149798395, digit=2)
round(0.03624377, digit=2)
Da[which(Da$geo_takis == "UA4" & Da$class == "Lithic"),]$d
Da[which(Da$geo_takis == "UA4" & Da$type == "debitage"),]$d
mean(Da[which(Da$geo_takis == "UA3c" & Da$d >= 0 & Da$type == "debris"),]$d)
sd(Da[which(Da$geo_takis == "UA3c" & Da$d >= 0 & Da$type == "debris"),]$d)
qqplot(Da[which(Da$geo_takis == "UA3c" & Da$d >= 0 & Da$type == "debris"),]$d)
?qqplot
qqnorm(Da[which(Da$geo_takis == "UA3c" & Da$d >= 0 & Da$type == "debris"),]$d)
qqline(Da[which(Da$geo_takis == "UA3c" & Da$d >= 0 & Da$type == "debris"),]$d)
foo <- Da[which(Da$geo_takis == "UA3c" & Da$d >= 0 & Da$type == "debris"),]$d
boxplot(foo)
m <- mean(foo)
s <- sd(foo)
hist(foo, prob=TRUE)
curve(dnorm(x, mean=m, sd=s), col="red", lwd=2, add=TRUE)
qqnorm(foo); qqline(foo, col="red", lwd=2)
shapiro.test(foo)
ks.test(foo, "pnorm")
mean(foo)
sd(foo)
ks.test(foo, "pnorm", mean(foo),sqrt(var(foo)))
skewness(foo)
kurtosis(foo)
?ks.test
shapiro.test(foo)
?shapiro.test
mean(Da[which(Da$geo_takis == "UA3c" & Da$d >= 0 & Da$type == "KN"),]$d)
mean(Da[which(Da$geo_takis == "UA3c" & Da$d >= 0 & Da$type == "ZN"),]$d)
mean(Da[which(Da$geo_takis == "UA3c" & Da$d >= 0 & Da$type == "MF"),]$d)
# student's t-test: compare debris/fauna distributions
foo <- Da[which(Da$geo_takis == "UA3c" & Da$type == "KN"),]$z
bar <- Da[which(Da$geo_takis == "UA3c" & Da$type == "ZN"),]$z
t.test(foo, bar)
# student's t-test: compare debris/fauna distributions
foo <- Da[which(Da$geo_takis == "UA3c" & Da$type == "KN"),]$d
bar <- Da[which(Da$geo_takis == "UA3c" & Da$type == "ZN"),]$d
t.test(foo, bar)
# student's t-test: compare debris/fauna distributions
foo <- Da[which(Da$geo_takis == "UA3c" & Da$class == "Lithic"),]$d
bar <- Da[which(Da$geo_takis == "UA3c" & Da$class == "Fauna"),]$d
t.test(foo, bar)
3*0.1
library(circular)
library(CircStats)
library(RFOC)
library(plotrix)
library(heR.Misc)
plunge <- rad(Elephas.fabric$plunge)
bearing <- rad(Elephas.fabric$bearing)
plunge <- rad(Elephas.fabric$plunge)
bearing <- rad(Elephas.fabric$bearing)
# Stepwise procedure for the S1/S3 test. Modified from [@Woodcock1983]
## step 1) express each direction in the sample as a set of three direction cosines. If the data are in the form of trend and plunge, the formulae are:
### l=cos(plunge)*cos(trend)
l <- c(cos(plunge)*cos(bearing))
### m=cos(plunge)*sin(trend)
m <- c(cos(plunge)*sin(bearing))
### n=sin(plunge)
n <- c(sin(plunge))
## step 2) and 3) compute the products of each direction-cosine set. sum the products over the whole data sample to give the orientation tensor
b <- matrix(c(
sum(l^2),sum(l*m),sum(l*n),
sum(m*l),sum(m^2),sum(m*n),
sum(n*l),sum(n*m),sum(n^2)),
ncol=3, byrow=TRUE)
## step 4) compute the eigenvectors and eigenvalues of this matrix
### the eigenvectors (v1,v2,v3) of this matrix correspond to three orthogonal 'principal axes' of the data sample. Axis v1 is an estimate of the mean direction of the data; v3 is the pole to any girdle present in the data [@Watson1966]
eigenvectors <- eigen(b)$vectors
dimnames(eigenvectors) <- list(c("v1","v2","v3"),c("l","m","n"))
### The eigenvalues (λ1,λ2,λ3), associated with (v1,v2,v3) respectively, describe the shape of the data sample [@Watson1966; @Mark1974; @Woodcock1973; @Woodcock1977]
eigenvalues <- eigen(b)$values
names(eigenvalues) <- c("λ1","λ2","λ3")
## equal area plot
v1.plunge <- deg(asin(eigenvectors["v1","n"]))
v1.bearing <- deg(acos(eigenvectors["v1","l"]/cos(asin(eigenvectors["v1","n"]))))
v2.plunge <- deg(asin(eigenvectors["v2","n"]))
v2.bearing <- deg(acos(eigenvectors["v2","l"]/cos(asin(eigenvectors["v2","n"]))))
v3.plunge <- deg(asin(eigenvectors["v3","n"]))
v3.bearing <- deg(acos(eigenvectors["v3","l"]/cos(asin(eigenvectors["v3","n"]))))
net()
qpoint(deg(bearing), 90-deg(plunge), col=1, pch=1, cex=1)
qpoint(deg(v1.bearing), 90-deg(v1.plunge), col=4, pch=10, cex=1, lab="v1")
qpoint(deg(v2.bearing), 90-deg(v2.plunge), col=4, pch=10, cex=1, lab="v2")
qpoint(deg(v3.bearing), 90-deg(v3.plunge), col=4, pch=10, cex=1, lab="v3")
## step 5) compute the eigenvalue ratio, particularly the ratio of the largest to smallest eigenvalue (S1/S3=λ1/λ3)
### since λ1+λ2+λ3=N then normalized eigenvalues Sj=λj/N are related by S1+S2+S3=1. A data cluster has S1>S2~=S3 and a data girdle has S1~=S2>S3
s1 <- eigenvalues["λ1"]/length(plunge)
s2 <- eigenvalues["λ2"]/length(plunge)
s3 <- eigenvalues["λ3"]/length(plunge)
## ---Elephant (43 obs)
#E.s1_s2 <- s1/s2
#E.s2_s3 <- s2/s3
#E.s1_s3 <- s1/s3
## Elephant (63 obs)
E63.s1_s2 <- s1/s2
E63.s2_s3 <- s2/s3
E63.s1_s3 <- s1/s3
#E.is <- s3/s1
E63.is <- s3/s1
#E.el <- 1-(s2/s1)
E63.el <- 1-(s2/s1)
#E.bs <- 1-(E.is+E.el)
E63.bs <- 1-(E63.is+E63.el)
# benn diagram
triax.plot(matrix(c(UA3c.bs,UA3c.el,UA3c.is),ncol=3,byrow=2), show.grid=TRUE, pch=16, cex.ticks=.8, cex.axis=1, axis.labels=c("","Elongation Index\n EL=1-(S2/S1)","Isotropy Index\n IS=S3/S1"), tick.labels=list(l=seq(0.1,0.9,by=0.1), r=seq(0.1,0.9,by=0.1), b=NULL), main="")
triax.points(matrix(c(UA3c.bs,UA3c.el,UA3c.is),ncol=3,byrow=2), pch=16, col="#a01d3bff", cex=2)
text(.58,.33, label="UA3c", lwd=.02)
triax.points(matrix(c(UA4.bs,UA4.el,UA4.is),ncol=3,byrow=2), pch=16, col="#a01d3bff", cex=2)
text(.4,.11, label="UA4", lwd=.02)
#triax.points(matrix(c(E.bs,E.el,E.is),ncol=3,byrow=2), pch=16, col="#a01d3bff", cex=2)
#text(.3,.11, label="Eleph.", lwd=.02)
triax.points(matrix(c(E63.bs,E63.el,E63.is),ncol=3,byrow=2), pch=16, col="#a01d3bff", cex=2)
text(.5,.18, label="Eleph.", lwd=.02)
#triax.points(matrix(c(UB4c_clock.bs,UB4c_clock.el,UB4c_clock.is),ncol=3,byrow=2), pch=16, col="#a01d3bff", cex=2)
#text(.42,.51, label="UB4c (clock)", lwd=.02)
triax.points(matrix(c(clock.bs,clock.el,clock.is),ncol=3,byrow=2), pch=16, cex=2, col="#a01d3bff")
text(.48,.40,label="UB4c (clock)")
#triax.points(matrix(c(UB4c_comp.bs,UB4c_comp.el,UB4c_comp.is),ncol=3,byrow=2), pch=16, col="#a01d3bff", cex=2)
#text(.48,.44, label="UB4c (comp)", lwd=.02)
triax.points(matrix(c(comp.bs,comp.el,comp.is),ncol=3,byrow=2), pch=16, cex=2, col="#a01d3bff")
text(.42,.53,label="UB4c (comp)")
text(0.5,0.9, label="isotropic")
text(-0.1,0, label="planar")
text(1.1,0, label="linear")
# E43
Elephas43.fabric <- Elephas.fabric[-grep(pattern="vertebra", x=Elephas.fabric$SKELETAL.ELEMENT),]
Elephas43.fabric <- Elephas43.fabric[-grep(pattern="atlas", x=Elephas43.fabric$SKELETAL.ELEMENT),]
Elephas43.fabric <- Elephas43.fabric[-grep(pattern="axis", x=Elephas43.fabric$SKELETAL.ELEMENT),]
Elephas43.fabric <- Elephas43.fabric[-grep(pattern="phalanx", x=Elephas43.fabric$SKELETAL.ELEMENT),]
plunge <- rad(Elephas43.fabric$plunge)
bearing <- rad(Elephas43.fabric$bearing)
plunge
bearing
# Stepwise procedure for the S1/S3 test. Modified from [@Woodcock1983]
## step 1) express each direction in the sample as a set of three direction cosines. If the data are in the form of trend and plunge, the formulae are:
### l=cos(plunge)*cos(trend)
l <- c(cos(plunge)*cos(bearing))
### m=cos(plunge)*sin(trend)
m <- c(cos(plunge)*sin(bearing))
### n=sin(plunge)
n <- c(sin(plunge))
## step 2) and 3) compute the products of each direction-cosine set. sum the products over the whole data sample to give the orientation tensor
b <- matrix(c(
sum(l^2),sum(l*m),sum(l*n),
sum(m*l),sum(m^2),sum(m*n),
sum(n*l),sum(n*m),sum(n^2)),
ncol=3, byrow=TRUE)
## step 4) compute the eigenvectors and eigenvalues of this matrix
### the eigenvectors (v1,v2,v3) of this matrix correspond to three orthogonal 'principal axes' of the data sample. Axis v1 is an estimate of the mean direction of the data; v3 is the pole to any girdle present in the data [@Watson1966]
eigenvectors <- eigen(b)$vectors
dimnames(eigenvectors) <- list(c("v1","v2","v3"),c("l","m","n"))
### The eigenvalues (λ1,λ2,λ3), associated with (v1,v2,v3) respectively, describe the shape of the data sample [@Watson1966; @Mark1974; @Woodcock1973; @Woodcock1977]
eigenvalues <- eigen(b)$values
names(eigenvalues) <- c("λ1","λ2","λ3")
## equal area plot
v1.plunge <- deg(asin(eigenvectors["v1","n"]))
v1.bearing <- deg(acos(eigenvectors["v1","l"]/cos(asin(eigenvectors["v1","n"]))))
v2.plunge <- deg(asin(eigenvectors["v2","n"]))
v2.bearing <- deg(acos(eigenvectors["v2","l"]/cos(asin(eigenvectors["v2","n"]))))
v3.plunge <- deg(asin(eigenvectors["v3","n"]))
v3.bearing <- deg(acos(eigenvectors["v3","l"]/cos(asin(eigenvectors["v3","n"]))))
net()
qpoint(deg(bearing), 90-deg(plunge), col=1, pch=1, cex=1)
qpoint(deg(v1.bearing), 90-deg(v1.plunge), col=4, pch=10, cex=1, lab="v1")
qpoint(deg(v2.bearing), 90-deg(v2.plunge), col=4, pch=10, cex=1, lab="v2")
qpoint(deg(v3.bearing), 90-deg(v3.plunge), col=4, pch=10, cex=1, lab="v3")
## step 5) compute the eigenvalue ratio, particularly the ratio of the largest to smallest eigenvalue (S1/S3=λ1/λ3)
### since λ1+λ2+λ3=N then normalized eigenvalues Sj=λj/N are related by S1+S2+S3=1. A data cluster has S1>S2~=S3 and a data girdle has S1~=S2>S3
s1 <- eigenvalues["λ1"]/length(plunge)
s2 <- eigenvalues["λ2"]/length(plunge)
s3 <- eigenvalues["λ3"]/length(plunge)
## ---Elephant (43 obs)
E43.s1_s2 <- s1/s2
E43.s2_s3 <- s2/s3
E43.s1_s3 <- s1/s3
E43.is <- s3/s1
E43.el <- 1-(s2/s1)
E43.bs <- 1-(E.is+E.el)
# benn diagram
triax.plot(matrix(c(UA3c.bs,UA3c.el,UA3c.is),ncol=3,byrow=2), show.grid=TRUE, pch=16, cex.ticks=.8, cex.axis=1, axis.labels=c("","Elongation Index\n EL=1-(S2/S1)","Isotropy Index\n IS=S3/S1"), tick.labels=list(l=seq(0.1,0.9,by=0.1), r=seq(0.1,0.9,by=0.1), b=NULL), main="")
triax.points(matrix(c(UA3c.bs,UA3c.el,UA3c.is),ncol=3,byrow=2), pch=16, col="#a01d3bff", cex=2)
text(.58,.33, label="UA3c", lwd=.02)
triax.points(matrix(c(UA4.bs,UA4.el,UA4.is),ncol=3,byrow=2), pch=16, col="#a01d3bff", cex=2)
text(.4,.11, label="UA4", lwd=.02)
triax.points(matrix(c(E43.bs,E43.el,E43.is),ncol=3,byrow=2), pch=16, col="#a01d3bff", cex=2)
triax.points(matrix(c(E43.bs,E43.el,E43.is),ncol=3,byrow=2), pch=16, col="#a01d3bff", cex=2)
### plot
plot(x=s1s3_test$N, y=log(s1s3_test$X90.), type="b", col="grey", lty=2, xlim=c(0,100), xlab="Obs.", ylab="ln C", main="b")
lines(x=s1s3_test$N, y=log(s1s3_test$X95.), type="b", col="grey", lty=2, add=TRUE)
lines(x=s1s3_test$N, y=log(s1s3_test$X97.5.), type="b", col="grey", lty=2, add=TRUE)
lines(x=s1s3_test$N, y=log(s1s3_test$X99.), type="b", col="grey", lty=2, add=TRUE)
points(C$V2, log(C$V1), pch=21, bg="#a51e37", col="#a51e37", cex=2, add=TRUE)
text(10,1, label="RANDOM",col="grey", lwd=.02)
text(25,2, label="SIGNIFICANT",col="grey",lwd=.02)
text(10,1, label="99",col="grey", lwd=.02)
text(10,1, label="97.5",col="grey", lwd=.02)
text(10,1, label="95",col="grey", lwd=.02)
text(18,3, label="RANDOM",col="grey", lwd=.02)
text(10,1, label="RANDOM",col="grey", lwd=.02)
text(18,3, label="99",col="grey", lwd=.02)
text(15,3, label="99",col="grey", lwd=.02)
text(10,3, label="99",col="grey", lwd=.02)
text(8,3, label="90%",col="grey", lwd=.02)
text(6,3, label="90%",col="grey", lwd=.02)
text(5,3, label="90%",col="grey", lwd=.02)
text(4,3, label="90%",col="grey", lwd=.02)
text(3.5,3, label="90%",col="grey", lwd=.02)
# fig.7: Woodcock diagram
setEPS()
pdf("./doc/artwork/Fig7.pdf", width=20, height=10)
par(mfcol=c(1,2), mar= c(6,6,6,6), ps=18, cex=1, cex.main=2, cex.axis=1, cex.lab=1)
## eigenvalues ratio graph
plot(log(UA3c.s2_s3),log(UA3c.s1_s2),pch=15,xlim=c(0,3),ylim=c(0,3),xlab="ln S2/S3",ylab="ln S1/S2", main="a")
## shape parameter K=ln(S1/S2)/ln(S2/S3) ranges from 0 (uniaxial girdles) to infinite (uniaxial clusters)
abline(h=0,col="grey",lty=2)
abline(v=0,col="grey",lty=2)
abline(0,1,col="grey",lty=2)
abline(0,2,col="grey",lty=2)
abline(0,.5,col="grey",lty=2)
abline(0,5,col="grey",lty=2)
abline(0,.2,col="grey",lty=2)
text(2.95,2.8,label="K=1",col="grey",lwd=.02)
text(2.95,.12,label="K=0",col="grey",lwd=.02)
text(.2,3,label=expression(paste("K=",infinity)),col="grey",lwd=.02)
text(2.95,.75,label="K=0.2",col="grey",lwd=.02)
text(2.95,1.65,label="K=0.5",col="grey",lwd=.02)
text(.8,3,label="K=5",col="grey",lwd=.02)
text(1.7,3,label="K=2",col="grey",lwd=.02)
## complementary to the shape parameter is the parameter C=ln(S1/S3) which expresses the 'strength' of the preferred orientation in the data sample [@Woodcock1977]. Strongly organized samples have larger C and plot further from the origin of the ratio graph. A perfect uniform distribution of data would have C=0 and would plot at the origin with S1=S2=S3=1/3. Random samples will also plot close to the origin and have low C values, suggesting that this parameter might be used as a test statistic for randomness
abline(3,-1,col="grey",lty=1)
text(1.7,1.5,label="C=3",col="grey",lwd=.02)
##
PlotPTsmooth(UA3c.fabric$bearing,UA3c.fabric$plunge,x=log(UA3c.s2_s3),y=log(UA3c.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
text(.5,.75,label="UA3c",col="black",lwd=.04)
PlotPTsmooth(UA4.fabric$bearing,UA4.fabric$plunge,x=log(UA4.s2_s3),y=log(UA4.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
text(1.5,.5,label="UA4",col="black",lwd=.04)
#PlotPTsmooth(Elephas.fabric$bearing,Elephas.fabric$plunge,x=log(E.s2_s3),y=log(E.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
#text(2.1,.1,label="Eleph.",col="black",lwd=.04)
PlotPTsmooth(Elephas.fabric$bearing,Elephas.fabric$plunge,x=log(E63.s2_s3),y=log(E63.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
text(1.3,.75,label="Eleph.",col="black",lwd=.04)
#PlotPTsmooth(UB4c_clock.fabric$bearing,UB4c_clock.fabric$plunge,x=log(UB4c_clock.s2_s3),y=log(UB4c_clock.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
#text(.4,.35,label="UB4c (clock)",col="black",lwd=.04)
PlotPTsmooth(deg(UB4c_test.fabric$bearing_clock),deg(UB4c_test.fabric$plunge_clock),x=log(clock.s2_s3),y=log(clock.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
text(.25,.40,label="UB4c (clock)",col="black",lwd=.02)
#PlotPTsmooth(UB4c_comp.fabric$bearing,UB4c_comp.fabric$plunge,x=log(UB4c_comp.s2_s3),y=log(UB4c_comp.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
#text(.8,.02,label="UB4c (comp)",col="black",lwd=.04)
PlotPTsmooth(deg(UB4c_test.fabric$bearing_comp),deg(UB4c_test.fabric$plunge_comp),x=log(comp.s2_s3),y=log(comp.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
text(.95,.20,label="UB4c (comp)",col="black",lwd=.02)
##
text(1.45,1.65,label="WEAK <--> STRONG",col="gray",lwd=.03,srt=45,pos=1)
text(2.55,2.63,label="<-- CLUSTERS | GIRDLES -->",col="gray",lwd=.03,srt=-45,pos=1)
### plot
plot(x=s1s3_test$N, y=log(s1s3_test$X90.), type="b", col="grey", lty=2, xlim=c(0,100), xlab="Obs.", ylab="ln C", main="b")
lines(x=s1s3_test$N, y=log(s1s3_test$X95.), type="b", col="grey", lty=2, add=TRUE)
lines(x=s1s3_test$N, y=log(s1s3_test$X97.5.), type="b", col="grey", lty=2, add=TRUE)
lines(x=s1s3_test$N, y=log(s1s3_test$X99.), type="b", col="grey", lty=2, add=TRUE)
points(C$V2, log(C$V1), pch=21, bg="#a51e37", col="#a51e37", cex=2, add=TRUE)
text(10,1, label="RANDOM",col="grey", lwd=.02)
text(25,2, label="SIGNIFICANT",col="grey",lwd=.02)
text(10,3, label="99%",col="grey", lwd=.02)
#text(10,1, label="97.5",col="grey", lwd=.02)
#text(10,1, label="95",col="grey", lwd=.02)
text(3.5,3, label="90%",col="grey", lwd=.02)
text(49,1.07, label="UA3c",col="black",lwd=.02)
text(38,1.86, label="UA4",col="black", lwd=.02)
text(63,1.92, label="Eleph.",col="black", lwd=.02)
text(38,.8, label="UB4c (clock)",col="black", lwd=.02)
text(38,.45, label="UB4c (comp)",col="black", lwd=.02)
dev.off()
library(circular)
library(CircStats)
library(RFOC)
library(plotrix)
library(heR.Misc)
# fig.7: Woodcock diagram
setEPS()
pdf("./doc/artwork/Fig7.pdf", width=20, height=10)
par(mfcol=c(1,2), mar= c(6,6,6,6), ps=18, cex=1, cex.main=2, cex.axis=1, cex.lab=1)
## eigenvalues ratio graph
plot(log(UA3c.s2_s3),log(UA3c.s1_s2),pch=15,xlim=c(0,3),ylim=c(0,3),xlab="ln S2/S3",ylab="ln S1/S2", main="a")
## shape parameter K=ln(S1/S2)/ln(S2/S3) ranges from 0 (uniaxial girdles) to infinite (uniaxial clusters)
abline(h=0,col="grey",lty=2)
abline(v=0,col="grey",lty=2)
abline(0,1,col="grey",lty=2)
abline(0,2,col="grey",lty=2)
abline(0,.5,col="grey",lty=2)
abline(0,5,col="grey",lty=2)
abline(0,.2,col="grey",lty=2)
text(2.95,2.8,label="K=1",col="grey",lwd=.02)
text(2.95,.12,label="K=0",col="grey",lwd=.02)
text(.2,3,label=expression(paste("K=",infinity)),col="grey",lwd=.02)
text(2.95,.75,label="K=0.2",col="grey",lwd=.02)
text(2.95,1.65,label="K=0.5",col="grey",lwd=.02)
text(.8,3,label="K=5",col="grey",lwd=.02)
text(1.7,3,label="K=2",col="grey",lwd=.02)
## complementary to the shape parameter is the parameter C=ln(S1/S3) which expresses the 'strength' of the preferred orientation in the data sample [@Woodcock1977]. Strongly organized samples have larger C and plot further from the origin of the ratio graph. A perfect uniform distribution of data would have C=0 and would plot at the origin with S1=S2=S3=1/3. Random samples will also plot close to the origin and have low C values, suggesting that this parameter might be used as a test statistic for randomness
abline(3,-1,col="grey",lty=1)
text(1.7,1.5,label="C=3",col="grey",lwd=.02)
##
PlotPTsmooth(UA3c.fabric$bearing,UA3c.fabric$plunge,x=log(UA3c.s2_s3),y=log(UA3c.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
text(.5,.75,label="UA3c",col="black",lwd=.04)
PlotPTsmooth(UA4.fabric$bearing,UA4.fabric$plunge,x=log(UA4.s2_s3),y=log(UA4.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
text(1.5,.5,label="UA4",col="black",lwd=.04)
#PlotPTsmooth(Elephas.fabric$bearing,Elephas.fabric$plunge,x=log(E.s2_s3),y=log(E.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
#text(2.1,.1,label="Eleph.",col="black",lwd=.04)
PlotPTsmooth(Elephas.fabric$bearing,Elephas.fabric$plunge,x=log(E63.s2_s3),y=log(E63.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
text(1.3,.75,label="Eleph.",col="black",lwd=.04)
#PlotPTsmooth(UB4c_clock.fabric$bearing,UB4c_clock.fabric$plunge,x=log(UB4c_clock.s2_s3),y=log(UB4c_clock.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
#text(.4,.35,label="UB4c (clock)",col="black",lwd=.04)
PlotPTsmooth(deg(UB4c_test.fabric$bearing_clock),deg(UB4c_test.fabric$plunge_clock),x=log(clock.s2_s3),y=log(clock.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
text(.25,.40,label="UB4c (clock)",col="black",lwd=.02)
#PlotPTsmooth(UB4c_comp.fabric$bearing,UB4c_comp.fabric$plunge,x=log(UB4c_comp.s2_s3),y=log(UB4c_comp.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
#text(.8,.02,label="UB4c (comp)",col="black",lwd=.04)
PlotPTsmooth(deg(UB4c_test.fabric$bearing_comp),deg(UB4c_test.fabric$plunge_comp),x=log(comp.s2_s3),y=log(comp.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
text(.95,.20,label="UB4c (comp)",col="black",lwd=.02)
##
text(1.45,1.65,label="WEAK <--> STRONG",col="gray",lwd=.03,srt=45,pos=1)
text(2.55,2.63,label="<-- CLUSTERS | GIRDLES -->",col="gray",lwd=.03,srt=-45,pos=1)
### plot
plot(x=s1s3_test$N, y=log(s1s3_test$X90.), type="b", col="grey", lty=2, xlim=c(0,100), xlab="Obs.", ylab="ln C", main="b")
lines(x=s1s3_test$N, y=log(s1s3_test$X95.), type="b", col="grey", lty=2, add=TRUE)
lines(x=s1s3_test$N, y=log(s1s3_test$X97.5.), type="b", col="grey", lty=2, add=TRUE)
lines(x=s1s3_test$N, y=log(s1s3_test$X99.), type="b", col="grey", lty=2, add=TRUE)
points(C$V2, log(C$V1), pch=21, bg="#a51e37", col="#a51e37", cex=2, add=TRUE)
text(10,1, label="RANDOM",col="grey", lwd=.02)
text(25,2, label="SIGNIFICANT",col="grey",lwd=.02)
text(10,3, label="99%",col="grey", lwd=.02)
#text(10,1, label="97.5",col="grey", lwd=.02)
#text(10,1, label="95",col="grey", lwd=.02)
text(3.5,3, label="90%",col="grey", lwd=.02)
text(49,1.07, label="UA3c",col="black",lwd=.02)
text(38,1.86, label="UA4",col="black", lwd=.02)
text(63,1.92, label="Eleph.",col="black", lwd=.02)
text(38,.8, label="UB4c (clock)",col="black", lwd=.02)
text(38,.45, label="UB4c (comp)",col="black", lwd=.02)
dev.off()
text(90,1, label="99%",col="grey", lwd=.02)
#text(10,1, label="97.5",col="grey", lwd=.02)
#text(10,1, label="95",col="grey", lwd=.02)
text(90,.5, label="90%",col="grey", lwd=.02)
#text(10,1, label="97.5",col="grey", lwd=.02)
#text(10,1, label="95",col="grey", lwd=.02)
text(90,.3, label="90%",col="grey", lwd=.02)
text(90,.8, label="99%",col="grey", lwd=.02)
# fig.7: Woodcock diagram
setEPS()
pdf("./doc/artwork/Fig7.pdf", width=20, height=10)
par(mfcol=c(1,2), mar= c(6,6,6,6), ps=18, cex=1, cex.main=2, cex.axis=1, cex.lab=1)
## eigenvalues ratio graph
plot(log(UA3c.s2_s3),log(UA3c.s1_s2),pch=15,xlim=c(0,3),ylim=c(0,3),xlab="ln S2/S3",ylab="ln S1/S2", main="a")
## shape parameter K=ln(S1/S2)/ln(S2/S3) ranges from 0 (uniaxial girdles) to infinite (uniaxial clusters)
abline(h=0,col="grey",lty=2)
abline(v=0,col="grey",lty=2)
abline(0,1,col="grey",lty=2)
abline(0,2,col="grey",lty=2)
abline(0,.5,col="grey",lty=2)
abline(0,5,col="grey",lty=2)
abline(0,.2,col="grey",lty=2)
text(2.95,2.8,label="K=1",col="grey",lwd=.02)
text(2.95,.12,label="K=0",col="grey",lwd=.02)
text(.2,3,label=expression(paste("K=",infinity)),col="grey",lwd=.02)
text(2.95,.75,label="K=0.2",col="grey",lwd=.02)
text(2.95,1.65,label="K=0.5",col="grey",lwd=.02)
text(.8,3,label="K=5",col="grey",lwd=.02)
text(1.7,3,label="K=2",col="grey",lwd=.02)
## complementary to the shape parameter is the parameter C=ln(S1/S3) which expresses the 'strength' of the preferred orientation in the data sample [@Woodcock1977]. Strongly organized samples have larger C and plot further from the origin of the ratio graph. A perfect uniform distribution of data would have C=0 and would plot at the origin with S1=S2=S3=1/3. Random samples will also plot close to the origin and have low C values, suggesting that this parameter might be used as a test statistic for randomness
abline(3,-1,col="grey",lty=1)
text(1.7,1.5,label="C=3",col="grey",lwd=.02)
##
PlotPTsmooth(UA3c.fabric$bearing,UA3c.fabric$plunge,x=log(UA3c.s2_s3),y=log(UA3c.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
text(.5,.75,label="UA3c",col="black",lwd=.04)
PlotPTsmooth(UA4.fabric$bearing,UA4.fabric$plunge,x=log(UA4.s2_s3),y=log(UA4.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
text(1.5,.5,label="UA4",col="black",lwd=.04)
#PlotPTsmooth(Elephas.fabric$bearing,Elephas.fabric$plunge,x=log(E.s2_s3),y=log(E.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
#text(2.1,.1,label="Eleph.",col="black",lwd=.04)
PlotPTsmooth(Elephas.fabric$bearing,Elephas.fabric$plunge,x=log(E63.s2_s3),y=log(E63.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
text(1.3,.75,label="Eleph.",col="black",lwd=.04)
#PlotPTsmooth(UB4c_clock.fabric$bearing,UB4c_clock.fabric$plunge,x=log(UB4c_clock.s2_s3),y=log(UB4c_clock.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
#text(.4,.35,label="UB4c (clock)",col="black",lwd=.04)
PlotPTsmooth(deg(UB4c_test.fabric$bearing_clock),deg(UB4c_test.fabric$plunge_clock),x=log(clock.s2_s3),y=log(clock.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
text(.25,.40,label="UB4c (clock)",col="black",lwd=.02)
#PlotPTsmooth(UB4c_comp.fabric$bearing,UB4c_comp.fabric$plunge,x=log(UB4c_comp.s2_s3),y=log(UB4c_comp.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
#text(.8,.02,label="UB4c (comp)",col="black",lwd=.04)
PlotPTsmooth(deg(UB4c_test.fabric$bearing_comp),deg(UB4c_test.fabric$plunge_comp),x=log(comp.s2_s3),y=log(comp.s1_s2),siz=0.1,IMAGE=TRUE,CONT=TRUE,add=TRUE)
text(.95,.20,label="UB4c (comp)",col="black",lwd=.02)
##
text(1.45,1.65,label="WEAK <--> STRONG",col="gray",lwd=.03,srt=45,pos=1)
text(2.55,2.63,label="<-- CLUSTERS | GIRDLES -->",col="gray",lwd=.03,srt=-45,pos=1)
### plot
plot(x=s1s3_test$N, y=log(s1s3_test$X90.), type="b", col="grey", lty=2, xlim=c(0,100), xlab="Obs.", ylab="ln C", main="b")
lines(x=s1s3_test$N, y=log(s1s3_test$X95.), type="b", col="grey", lty=2, add=TRUE)
lines(x=s1s3_test$N, y=log(s1s3_test$X97.5.), type="b", col="grey", lty=2, add=TRUE)
lines(x=s1s3_test$N, y=log(s1s3_test$X99.), type="b", col="grey", lty=2, add=TRUE)
points(C$V2, log(C$V1), pch=21, bg="#a51e37", col="#a51e37", cex=2, add=TRUE)
text(10,1, label="RANDOM",col="grey", lwd=.02)
text(25,2, label="SIGNIFICANT",col="grey",lwd=.02)
text(90,.8, label="99%",col="grey", lwd=.02)
#text(10,1, label="97.5",col="grey", lwd=.02)
#text(10,1, label="95",col="grey", lwd=.02)
text(90,.3, label="90%",col="grey", lwd=.02)
text(49,1.07, label="UA3c",col="black",lwd=.02)
text(38,1.86, label="UA4",col="black", lwd=.02)
text(63,1.92, label="Eleph.",col="black", lwd=.02)
text(38,.8, label="UB4c (clock)",col="black", lwd=.02)
text(38,.45, label="UB4c (comp)",col="black", lwd=.02)
dev.off()
library(circular)
library(CircStats)
library(RFOC)
library(plotrix)
library(heR.Misc)
library(sp)
library(rgdal)
library(raster)
library(maptools)
library(gtools)
library(mapproj)
library(spatstat)
library(sp)
library(rgdal)
library(raster)
library(maptools)
library(gtools)
library(mapproj)
library(spatstat)
library(sp)
library(rgdal)
library(raster)
library(maptools)
library(gtools)
library(mapproj)
library(spatstat)
sessionInfo()
