nn <- nncross(lithic.A.pp3, Eleph.pp3, what="dist")
hist(nn, prob=TRUE, xlab="meter", main="c")
lines(density(nn, bw="nrd"), col="#a51e37", lwd=4)
dev.off()
nf <- layout(matrix(c(1,2,3,4,4,5), 2, 3, byrow = TRUE), widths=c(1,1,2), heights=c(1,1))
layout.show(nf)
nf <- layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE), widths=c(1,1,2), heights=c(1,1))
layout.show(nf)
# fig.11: area A
setEPS()
pdf("./doc/artwork/Fig11.pdf", width=20, height=10, family="Helvetica")
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE), widths=c(1,1,2), heights=c(1,1))
par(mar= c(6,6,6,6), ps=18, cex=1, cex.main=2, cex.axis=1, cex.lab=1)
set.seed(0979)
w <- as.owin(unitsA_2015.shp)
plot(density(UA3c.ppp[UA3c.ppp$marks$class == "Fauna"], sigma=bw.diggle(UA3c.ppp[UA3c.ppp$marks$class == "Fauna"]), diggle=TRUE), axes=TRUE, main="a"); plot(w, add=TRUE); plot(b2, lwd=4, border="green", add=TRUE)
d <- density(UA3c.ppp[UA3c.ppp$marks$class == "Lithic"], sigma=bw.diggle(UA3c.ppp[UA3c.ppp$marks$class == "Lithic"]), diggle=TRUE)
contour.im(d, add=TRUE) # nlevels=4
e <- as.owin(Elephas.shp)
plot(e, add=TRUE, pch=24, lwd=2, col="grey") #, border="red")
GISTools::north.arrow(xb=937.5, yb=677.5, len=0.05, lab="N", cex.lab=1)
GISTools::map.scale(xc=938.5, yc=677.5, len=1, units="meter", ndivs=1)
E <- envelope.pp3(lithic.A.pp3, fun=pcf3est, nsim=199, correction="iso", global=FALSE)
plot(E, xlim=c(0,1), lwd=4, legend=TRUE, main="b")
abline(v=0.35, lty=2, lwd=1, col="grey"); abline(v=0.65, lty=2, lwd=1, col="grey")
text(0.37,0, label="0.35", col="grey"); text(0.67,0, label="0.65", col="grey")
nn <- nncross(lithic.A.pp3, Eleph.pp3, what="dist")
hist(nn, prob=TRUE, xlab="meter", main="c")
lines(density(nn, bw="nrd"), col="#a51e37", lwd=4)
dev.off()
# fig.11: area A
setEPS()
pdf("./doc/artwork/Fig11.pdf", width=20, height=10, family="Helvetica")
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE), widths=c(1,1,2), heights=c(1,1))
par(ps=18, cex=1, cex.main=2, cex.axis=1, cex.lab=1)
set.seed(0979)
w <- as.owin(unitsA_2015.shp)
plot(density(UA3c.ppp[UA3c.ppp$marks$class == "Fauna"], sigma=bw.diggle(UA3c.ppp[UA3c.ppp$marks$class == "Fauna"]), diggle=TRUE), axes=TRUE, main="a"); plot(w, add=TRUE); plot(b2, lwd=4, border="green", add=TRUE)
d <- density(UA3c.ppp[UA3c.ppp$marks$class == "Lithic"], sigma=bw.diggle(UA3c.ppp[UA3c.ppp$marks$class == "Lithic"]), diggle=TRUE)
contour.im(d, add=TRUE) # nlevels=4
e <- as.owin(Elephas.shp)
plot(e, add=TRUE, pch=24, lwd=2, col="grey") #, border="red")
GISTools::north.arrow(xb=937.5, yb=677.5, len=0.05, lab="N", cex.lab=1)
GISTools::map.scale(xc=938.5, yc=677.5, len=1, units="meter", ndivs=1)
E <- envelope.pp3(lithic.A.pp3, fun=pcf3est, nsim=199, correction="iso", global=FALSE)
plot(E, xlim=c(0,1), lwd=4, legend=TRUE, main="b")
abline(v=0.35, lty=2, lwd=1, col="grey"); abline(v=0.65, lty=2, lwd=1, col="grey")
text(0.37,0, label="0.35", col="grey"); text(0.67,0, label="0.65", col="grey")
nn <- nncross(lithic.A.pp3, Eleph.pp3, what="dist")
hist(nn, prob=TRUE, xlab="meter", main="c")
lines(density(nn, bw="nrd"), col="#a51e37", lwd=4)
dev.off()
# fig.11: area A
setEPS()
pdf("./doc/artwork/Fig11.pdf", width=20, height=20, family="Helvetica")
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE), widths=c(1,1,2), heights=c(1,1))
par(ps=18, cex=1, cex.main=2, cex.axis=1, cex.lab=1)
set.seed(0979)
w <- as.owin(unitsA_2015.shp)
plot(density(UA3c.ppp[UA3c.ppp$marks$class == "Fauna"], sigma=bw.diggle(UA3c.ppp[UA3c.ppp$marks$class == "Fauna"]), diggle=TRUE), axes=TRUE, main="a"); plot(w, add=TRUE); plot(b2, lwd=4, border="green", add=TRUE)
d <- density(UA3c.ppp[UA3c.ppp$marks$class == "Lithic"], sigma=bw.diggle(UA3c.ppp[UA3c.ppp$marks$class == "Lithic"]), diggle=TRUE)
contour.im(d, add=TRUE) # nlevels=4
e <- as.owin(Elephas.shp)
plot(e, add=TRUE, pch=24, lwd=2, col="grey") #, border="red")
GISTools::north.arrow(xb=937.5, yb=677.5, len=0.05, lab="N", cex.lab=1)
GISTools::map.scale(xc=938.5, yc=677.5, len=1, units="meter", ndivs=1)
E <- envelope.pp3(lithic.A.pp3, fun=pcf3est, nsim=199, correction="iso", global=FALSE)
plot(E, xlim=c(0,1), lwd=4, legend=TRUE, main="b")
abline(v=0.35, lty=2, lwd=1, col="grey"); abline(v=0.65, lty=2, lwd=1, col="grey")
text(0.37,0, label="0.35", col="grey"); text(0.67,0, label="0.65", col="grey")
nn <- nncross(lithic.A.pp3, Eleph.pp3, what="dist")
hist(nn, prob=TRUE, xlab="meter", main="c")
lines(density(nn, bw="nrd"), col="#a51e37", lwd=4)
dev.off()
# fig.11: area A
setEPS()
pdf("./doc/artwork/Fig11.pdf", width=20, height=20, family="Helvetica")
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE), widths=c(1,1,2), heights=c(1,1))
par(mar= c(6,6,6,6), ps=18, cex=1, cex.main=2, cex.axis=1, cex.lab=1)
set.seed(0979)
w <- as.owin(unitsA_2015.shp)
plot(density(UA3c.ppp[UA3c.ppp$marks$class == "Fauna"], sigma=bw.diggle(UA3c.ppp[UA3c.ppp$marks$class == "Fauna"]), diggle=TRUE), axes=TRUE, main="a"); plot(w, add=TRUE); plot(b2, lwd=4, border="green", add=TRUE)
d <- density(UA3c.ppp[UA3c.ppp$marks$class == "Lithic"], sigma=bw.diggle(UA3c.ppp[UA3c.ppp$marks$class == "Lithic"]), diggle=TRUE)
contour.im(d, add=TRUE) # nlevels=4
e <- as.owin(Elephas.shp)
plot(e, add=TRUE, pch=24, lwd=2, col="grey") #, border="red")
GISTools::north.arrow(xb=937.5, yb=677.5, len=0.05, lab="N", cex.lab=1)
GISTools::map.scale(xc=938.5, yc=677.5, len=1, units="meter", ndivs=1)
E <- envelope.pp3(lithic.A.pp3, fun=pcf3est, nsim=199, correction="iso", global=FALSE)
plot(E, xlim=c(0,1), lwd=4, legend=TRUE, main="b")
abline(v=0.35, lty=2, lwd=1, col="grey"); abline(v=0.65, lty=2, lwd=1, col="grey")
text(0.37,0, label="0.35", col="grey"); text(0.67,0, label="0.65", col="grey")
nn <- nncross(lithic.A.pp3, Eleph.pp3, what="dist")
hist(nn, prob=TRUE, xlab="meter", main="c")
lines(density(nn, bw="nrd"), col="#a51e37", lwd=4)
dev.off()
# fig.11: area A
setEPS()
postscript("./doc/artwork/Fig11.eps", width=20, height=20, family="Helvetica")
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE), widths=c(1,1,2), heights=c(1,1))
par(mar= c(6,6,6,6), ps=18, cex=1, cex.main=2, cex.axis=1, cex.lab=1)
set.seed(0979)
w <- as.owin(unitsA_2015.shp)
plot(density(UA3c.ppp[UA3c.ppp$marks$class == "Fauna"], sigma=bw.diggle(UA3c.ppp[UA3c.ppp$marks$class == "Fauna"]), diggle=TRUE), axes=TRUE, main="a"); plot(w, add=TRUE); plot(b2, lwd=4, border="green", add=TRUE)
d <- density(UA3c.ppp[UA3c.ppp$marks$class == "Lithic"], sigma=bw.diggle(UA3c.ppp[UA3c.ppp$marks$class == "Lithic"]), diggle=TRUE)
contour.im(d, add=TRUE) # nlevels=4
e <- as.owin(Elephas.shp)
plot(e, add=TRUE, pch=24, lwd=2, col="grey") #, border="red")
GISTools::north.arrow(xb=937.5, yb=677.5, len=0.05, lab="N", cex.lab=1)
GISTools::map.scale(xc=938.5, yc=677.5, len=1, units="meter", ndivs=1)
E <- envelope.pp3(lithic.A.pp3, fun=pcf3est, nsim=199, correction="iso", global=FALSE)
plot(E, xlim=c(0,1), lwd=4, legend=TRUE, main="b")
abline(v=0.35, lty=2, lwd=1, col="grey"); abline(v=0.65, lty=2, lwd=1, col="grey")
text(0.37,0, label="0.35", col="grey"); text(0.67,0, label="0.65", col="grey")
nn <- nncross(lithic.A.pp3, Eleph.pp3, what="dist")
hist(nn, prob=TRUE, xlab="meter", main="c")
lines(density(nn, bw="nrd"), col="#a51e37", lwd=4)
dev.off()
# fig.12: area B
setEPS()
pdf("./doc/artwork/Fig12.pdf", width=20, height=20, family="Helvetica")
layout(matrix(c(1,2,3,4,4,5), 2, 3, byrow = TRUE), widths=c(1,1,2), heights=c(1,1))
par(mar= c(6,6,6,6), ps=18, cex=1, cex.main=2, cex.axis=1, cex.lab=1)
set.seed(0979)
w <- as.owin(unitsB_2015.shp)
plot(density(unmark(UB4c.ppp), sigma=bw.diggle(unmark(UB4c.ppp)), diggle=TRUE), axes=TRUE, main="a"); plot(w, add=TRUE)
library(GISTools)
GISTools::north.arrow(xb=933, yb=610, len=0.1, lab="N", cex.lab=1)
GISTools::map.scale(xc=933.5, yc=608.5, len=1, units="meter", ndivs=1)
plot(density(unmark(UB5a.ppp), sigma=bw.diggle(unmark(UB5a.ppp)), diggle=TRUE), axes=TRUE, main="b"); plot(w, add=TRUE)
GISTools::north.arrow(xb=933, yb=610, len=0.1, lab="N", cex.lab=1)
GISTools::map.scale(xc=933.5, yc=608.5, len=1, units="meter", ndivs=1)
rho <- rhohat(unmark(UB4c.ppp), UB5a_surf.idw, smoother="local", method="transform", horvitz=FALSE)
plot(rho, main="c")
E <- envelope.ppp(foo, pcfcross, nsim=199, i="UB4c", j="UB5a", simulate=expression(rshift(foo, edge="erode", radius=0.1)))
plot(E, xlim=c(0,.8), ylim=c(0,4), main="d")
abline(v=0.3, lty=2, lwd=1, col="grey")
text(0.35,0, label="0.3", col="grey")
E <- envelope.ppp(foo, Gcross, nsim=199, i="UB4c", j="UB5a")
plot(E, main="e")
abline(v=0.3, lty=2, lwd=1, col="grey")
text(0.35,0, label="0.3", col="grey")
dev.off()
foo <- superimpose(UB4c.ppp, UB5a.ppp)
summary(foo)
marks(foo) <- factor(foo$marks$geo_takis)
plot(split(foo))
# fig.12: area B
setEPS()
pdf("./doc/artwork/Fig12.pdf", width=20, height=20, family="Helvetica")
layout(matrix(c(1,2,3,4,4,5), 2, 3, byrow = TRUE), widths=c(1,1,2), heights=c(1,1))
par(mar= c(6,6,6,6), ps=18, cex=1, cex.main=2, cex.axis=1, cex.lab=1)
set.seed(0979)
w <- as.owin(unitsB_2015.shp)
plot(density(unmark(UB4c.ppp), sigma=bw.diggle(unmark(UB4c.ppp)), diggle=TRUE), axes=TRUE, main="a"); plot(w, add=TRUE)
library(GISTools)
GISTools::north.arrow(xb=933, yb=610, len=0.1, lab="N", cex.lab=1)
GISTools::map.scale(xc=933.5, yc=608.5, len=1, units="meter", ndivs=1)
plot(density(unmark(UB5a.ppp), sigma=bw.diggle(unmark(UB5a.ppp)), diggle=TRUE), axes=TRUE, main="b"); plot(w, add=TRUE)
GISTools::north.arrow(xb=933, yb=610, len=0.1, lab="N", cex.lab=1)
GISTools::map.scale(xc=933.5, yc=608.5, len=1, units="meter", ndivs=1)
rho <- rhohat(unmark(UB4c.ppp), UB5a_surf.idw, smoother="local", method="transform", horvitz=FALSE)
plot(rho, main="c")
E <- envelope.ppp(foo, pcfcross, nsim=199, i="UB4c", j="UB5a", simulate=expression(rshift(foo, edge="erode", radius=0.1)))
plot(E, xlim=c(0,.8), ylim=c(0,4), main="d")
abline(v=0.3, lty=2, lwd=1, col="grey")
text(0.35,0, label="0.3", col="grey")
E <- envelope.ppp(foo, Gcross, nsim=199, i="UB4c", j="UB5a")
plot(E, main="e")
abline(v=0.3, lty=2, lwd=1, col="grey")
text(0.35,0, label="0.3", col="grey")
dev.off()
# fig.11: area A
setEPS()
pdf("./doc/artwork/Fig11.pdf", width=20, height=20, family="Helvetica")
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE), widths=c(1,1,2), heights=c(1,1))
par(mar= c(6,6,6,6), ps=18, cex=1, cex.main=2, cex.axis=1, cex.lab=1)
set.seed(0979)
w <- as.owin(unitsA_2015.shp)
plot(density(UA3c.ppp[UA3c.ppp$marks$class == "Fauna"], sigma=bw.diggle(UA3c.ppp[UA3c.ppp$marks$class == "Fauna"]), diggle=TRUE), axes=TRUE, main="a"); plot(w, add=TRUE); plot(b2, lwd=4, border="green", add=TRUE)
d <- density(UA3c.ppp[UA3c.ppp$marks$class == "Lithic"], sigma=bw.diggle(UA3c.ppp[UA3c.ppp$marks$class == "Lithic"]), diggle=TRUE)
contour.im(d, add=TRUE) # nlevels=4
e <- as.owin(Elephas.shp)
plot(e, add=TRUE, pch=24, lwd=2, col="grey") #, border="red")
GISTools::north.arrow(xb=937.5, yb=677.5, len=0.05, lab="N", cex.lab=1)
GISTools::map.scale(xc=938.5, yc=677.5, len=1, units="meter", ndivs=1)
E <- envelope.pp3(lithic.A.pp3, fun=pcf3est, nsim=199, correction="iso", global=FALSE)
plot(E, xlim=c(0,1), lwd=4, legend=TRUE, main="b")
abline(v=0.35, lty=2, lwd=2, col="grey"); abline(v=0.65, lty=2, lwd=1, col="grey")
text(0.37,0, label="0.35", col="grey"); text(0.67,0, label="0.65", col="grey")
nn <- nncross(lithic.A.pp3, Eleph.pp3, what="dist")
hist(nn, prob=TRUE, xlab="meter", main="c")
lines(density(nn, bw="nrd"), col="#a51e37", lwd=4)
dev.off()
# fig.11: area A
setEPS()
postscript("./doc/artwork/Fig11.eps", width=20, height=20, family="Helvetica")
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE), widths=c(1,1,2), heights=c(1,1))
par(mar= c(6,6,6,6), ps=18, cex=1, cex.main=2, cex.axis=1, cex.lab=1)
set.seed(0979)
w <- as.owin(unitsA_2015.shp)
plot(density(UA3c.ppp[UA3c.ppp$marks$class == "Fauna"], sigma=bw.diggle(UA3c.ppp[UA3c.ppp$marks$class == "Fauna"]), diggle=TRUE), axes=TRUE, main="a"); plot(w, add=TRUE); plot(b2, lwd=4, border="green", add=TRUE)
d <- density(UA3c.ppp[UA3c.ppp$marks$class == "Lithic"], sigma=bw.diggle(UA3c.ppp[UA3c.ppp$marks$class == "Lithic"]), diggle=TRUE)
contour.im(d, add=TRUE) # nlevels=4
e <- as.owin(Elephas.shp)
plot(e, add=TRUE, pch=24, lwd=2, col="grey") #, border="red")
GISTools::north.arrow(xb=937.5, yb=677.5, len=0.05, lab="N", cex.lab=1)
GISTools::map.scale(xc=938.5, yc=677.5, len=1, units="meter", ndivs=1)
E <- envelope.pp3(lithic.A.pp3, fun=pcf3est, nsim=199, correction="iso", global=FALSE)
plot(E, xlim=c(0,1), lwd=4, legend=TRUE, main="b")
abline(v=0.35, lty=2, lwd=2, col="grey"); abline(v=0.65, lty=2, lwd=1, col="grey")
text(0.37,0, label="0.35", col="grey"); text(0.67,0, label="0.65", col="grey")
nn <- nncross(lithic.A.pp3, Eleph.pp3, what="dist")
hist(nn, prob=TRUE, xlab="meter", main="c")
lines(density(nn, bw="nrd"), col="#a51e37", lwd=4)
dev.off()
# fig.12: area B
setEPS()
pdf("./doc/artwork/Fig12.pdf", width=20, height=20, family="Helvetica")
layout(matrix(c(1,2,3,4,4,5), 2, 3, byrow = TRUE), widths=c(1,1,2), heights=c(1,1))
par(mar= c(6,6,6,6), ps=18, cex=1, cex.main=2, cex.axis=1, cex.lab=1)
set.seed(0979)
w <- as.owin(unitsB_2015.shp)
plot(density(unmark(UB4c.ppp), sigma=bw.diggle(unmark(UB4c.ppp)), diggle=TRUE), axes=TRUE, main="a"); plot(w, add=TRUE)
library(GISTools)
GISTools::north.arrow(xb=933, yb=610, len=0.1, lab="N", cex.lab=1)
GISTools::map.scale(xc=933.5, yc=608.5, len=1, units="meter", ndivs=1)
plot(density(unmark(UB5a.ppp), sigma=bw.diggle(unmark(UB5a.ppp)), diggle=TRUE), axes=TRUE, main="b"); plot(w, add=TRUE)
GISTools::north.arrow(xb=933, yb=610, len=0.1, lab="N", cex.lab=1)
GISTools::map.scale(xc=933.5, yc=608.5, len=1, units="meter", ndivs=1)
rho <- rhohat(unmark(UB4c.ppp), UB5a_surf.idw, smoother="local", method="transform", horvitz=FALSE)
plot(rho, main="c")
E <- envelope.ppp(foo, pcfcross, nsim=199, i="UB4c", j="UB5a", simulate=expression(rshift(foo, edge="erode", radius=0.1)))
plot(E, lwd=4, legend=TRUE, xlim=c(0,.8), ylim=c(0,4), main="d")
abline(v=0.3, lty=2, lwd=2, col="grey")
text(0.35,0, label="0.3", col="grey")
E <- envelope.ppp(foo, Gcross, nsim=199, i="UB4c", j="UB5a")
plot(E, lwd=4, legend=TRUE, main="e")
abline(v=0.3, lty=2, lwd=2, col="grey")
text(0.35,0, label="0.3", col="grey")
dev.off()
# fig.12: area B
setEPS()
postscript("./doc/artwork/Fig12.eps", width=20, height=20, family="Helvetica")
layout(matrix(c(1,2,3,4,4,5), 2, 3, byrow = TRUE), widths=c(1,1,2), heights=c(1,1))
par(mar= c(6,6,6,6), ps=18, cex=1, cex.main=2, cex.axis=1, cex.lab=1)
set.seed(0979)
w <- as.owin(unitsB_2015.shp)
plot(density(unmark(UB4c.ppp), sigma=bw.diggle(unmark(UB4c.ppp)), diggle=TRUE), axes=TRUE, main="a"); plot(w, add=TRUE)
library(GISTools)
GISTools::north.arrow(xb=933, yb=610, len=0.1, lab="N", cex.lab=1)
GISTools::map.scale(xc=933.5, yc=608.5, len=1, units="meter", ndivs=1)
plot(density(unmark(UB5a.ppp), sigma=bw.diggle(unmark(UB5a.ppp)), diggle=TRUE), axes=TRUE, main="b"); plot(w, add=TRUE)
GISTools::north.arrow(xb=933, yb=610, len=0.1, lab="N", cex.lab=1)
GISTools::map.scale(xc=933.5, yc=608.5, len=1, units="meter", ndivs=1)
rho <- rhohat(unmark(UB4c.ppp), UB5a_surf.idw, smoother="local", method="transform", horvitz=FALSE)
plot(rho, main="c")
E <- envelope.ppp(foo, pcfcross, nsim=199, i="UB4c", j="UB5a", simulate=expression(rshift(foo, edge="erode", radius=0.1)))
plot(E, lwd=4, legend=TRUE, xlim=c(0,.8), ylim=c(0,4), main="d")
abline(v=0.3, lty=2, lwd=2, col="grey")
text(0.35,0, label="0.3", col="grey")
E <- envelope.ppp(foo, Gcross, nsim=199, i="UB4c", j="UB5a")
plot(E, lwd=4, legend=TRUE, main="e")
abline(v=0.3, lty=2, lwd=2, col="grey")
text(0.35,0, label="0.3", col="grey")
dev.off()
plot(density(split(baz)))
plot(density(split(baz)))
plot(split(baz))
intensity(baz)
# multitype (type) point pattern
foo <- UB4c.ppp[which(UB4c.ppp$marks$class == "Lithic")]
bar <- UB4c.ppp[which(UB4c.ppp$marks$class == "Fauna")]
baz <- superimpose(foo, bar)
summary(baz)
baz$marks$type <- factor(baz$marks$type)
levels(baz$marks$type)
levels(baz$marks$type) <- c("core","debitage","debris","indet","fauna","fauna","tool","fauna")
baz <- baz[-which(baz$marks$type == "indet")]
baz$marks$type <- factor(baz$marks$type)
summary(baz)
marks(baz) <- marks(baz)[,"type"]
intensity(baz)
plot(split(baz))
plot(density(split(baz)))
# fig.13: area B, multitype correlation (Pointwise envelopes)
setEPS()
pdf("./doc/artwork/Fig13.pdf", width=20, height=20, family="Helvetica")
par(mfcol=c(2,2), mar= c(6,6,6,6), ps=18, cex=1, cex.main=2, cex.axis=1, cex.lab=1)
set.seed(0979)
E <- envelope.ppp(baz, Kdif, nsim=199, i="debris", j="debitage", global=FALSE, correction="Ripley", simulate=expression(rlabel(baz)))
plot(E, lwd=2, main="a")
E <- envelope.ppp(baz, Kdif, nsim=199, i="debris", j="core", global=FALSE, correction="Ripley", simulate=expression(rlabel(baz)))
plot(E, lwd=2, main="c")
E <- envelope.ppp(baz, Kdif, nsim=199, i="debris", j="tool", global=FALSE, correction="Ripley", simulate=expression(rlabel(baz)))
plot(E, lwd=2, main="b")
E <- envelope.ppp(baz, Kdif, nsim=199, i="debris", j="fauna", global=FALSE, correction="Ripley", simulate=expression(rlabel(baz)))
plot(E, lwd=2, main="d")
dev.off()
# fig.13: area B, multitype correlation (Pointwise envelopes)
setEPS()
postscript("./doc/artwork/Fig13.eps", width=20, height=20, family="Helvetica")
par(mfcol=c(2,2), mar= c(6,6,6,6), ps=18, cex=1, cex.main=2, cex.axis=1, cex.lab=1)
set.seed(0979)
E <- envelope.ppp(baz, Kdif, nsim=199, i="debris", j="debitage", global=FALSE, correction="Ripley", simulate=expression(rlabel(baz)))
plot(E, lwd=2, main="a")
E <- envelope.ppp(baz, Kdif, nsim=199, i="debris", j="core", global=FALSE, correction="Ripley", simulate=expression(rlabel(baz)))
plot(E, lwd=2, main="c")
E <- envelope.ppp(baz, Kdif, nsim=199, i="debris", j="tool", global=FALSE, correction="Ripley", simulate=expression(rlabel(baz)))
plot(E, lwd=2, main="b")
E <- envelope.ppp(baz, Kdif, nsim=199, i="debris", j="fauna", global=FALSE, correction="Ripley", simulate=expression(rlabel(baz)))
plot(E, lwd=2, main="d")
dev.off()
# fig.6: rose diagram, 12 bins (30 degrees)
# (double column - full page width: 190mm/539pt/7.48inches; lettering: 7pt)
setEPS()
pdf("./doc/artwork/Fig6.pdf", width=20, height=10, family="Helvetica")
par(mfcol=c(2,3), ps=18, cex=1, cex.main=2, cex.axis=1, cex.lab=1)
heR.Misc::rose(UA3c.fabric$bearing, bins=12, col="#a01d3bff", rings=TRUE, labels=TRUE, rscale=2, cex=1, main="a")
#plot(c(-1,1), c(-1,1), asp=1, type='n', axes=FALSE, xlab="", ylab="", main="a")
#PlotPTsmooth(UA3c.fabric$bearing,UA3c.fabric$plunge,IMAGE=TRUE,CONT=TRUE)
heR.Misc::rose(UB4c_test.fabric$bearing_clock, bins=12, col="#a01d3bff", rings=TRUE, labels=TRUE, rscale=2, main="d")
heR.Misc::rose(UA4.fabric$bearing, bins=12, col="#a01d3bff", rings=TRUE, labels=TRUE, rscale=2, main="b")
heR.Misc::rose(UB4c_test.fabric$bearing_comp, bins=12, col="#a01d3bff", rings=TRUE, labels=TRUE, rscale=2, main="e")
heR.Misc::rose(Elephas.fabric$bearing, bins=12, col="#a01d3bff", rings=TRUE, labels=TRUE, rscale=2, main="c")
#plot(c(-1,1), c(-1,1), asp=1, type='n', axes=FALSE, xlab="", ylab="", main="a")
#PlotPTsmooth(Elephas.fabric$bearing,Elephas.fabric$plunge,IMAGE=TRUE,CONT=TRUE)
#heR.Misc::rose(UB4c_clock.fabric$bearing, bins=12, col="#a01d3bff", rings=TRUE, labels=TRUE, rscale=2, main="d")
#heR.Misc::rose(UB4c_comp.fabric$bearing, bins=12, col="#a01d3bff", rings=TRUE, labels=TRUE, rscale=2, main="e")
dev.off()
# fig.6: rose diagram, 12 bins (30 degrees)
# (double column - full page width: 190mm/539pt/7.48inches; lettering: 7pt)
setEPS()
postscript("./doc/artwork/Fig6.eps", width=20, height=10, family="Helvetica")
par(mfcol=c(2,3), ps=18, cex=1, cex.main=2, cex.axis=1, cex.lab=1)
heR.Misc::rose(UA3c.fabric$bearing, bins=12, col="#a01d3bff", rings=TRUE, labels=TRUE, rscale=2, cex=1, main="a")
#plot(c(-1,1), c(-1,1), asp=1, type='n', axes=FALSE, xlab="", ylab="", main="a")
#PlotPTsmooth(UA3c.fabric$bearing,UA3c.fabric$plunge,IMAGE=TRUE,CONT=TRUE)
heR.Misc::rose(UB4c_test.fabric$bearing_clock, bins=12, col="#a01d3bff", rings=TRUE, labels=TRUE, rscale=2, main="d")
heR.Misc::rose(UA4.fabric$bearing, bins=12, col="#a01d3bff", rings=TRUE, labels=TRUE, rscale=2, main="b")
heR.Misc::rose(UB4c_test.fabric$bearing_comp, bins=12, col="#a01d3bff", rings=TRUE, labels=TRUE, rscale=2, main="e")
heR.Misc::rose(Elephas.fabric$bearing, bins=12, col="#a01d3bff", rings=TRUE, labels=TRUE, rscale=2, main="c")
#plot(c(-1,1), c(-1,1), asp=1, type='n', axes=FALSE, xlab="", ylab="", main="a")
#PlotPTsmooth(Elephas.fabric$bearing,Elephas.fabric$plunge,IMAGE=TRUE,CONT=TRUE)
#heR.Misc::rose(UB4c_clock.fabric$bearing, bins=12, col="#a01d3bff", rings=TRUE, labels=TRUE, rscale=2, main="d")
#heR.Misc::rose(UB4c_comp.fabric$bearing, bins=12, col="#a01d3bff", rings=TRUE, labels=TRUE, rscale=2, main="e")
dev.off()
col2hex("grey")
lithic.A.pp3
summary(Xa.ppp)
summary(Xa.ppp$marks)
Xa.ppp
summary(Xa.ppp$marks)
summary(Xb.ppp$marks)
bearing <- rad(UA3c.fabric$bearing)
library(circular)
library(CircStats)
library(RFOC)
library(plotrix)
library(heR.Misc)
bearing <- rad(UA3c.fabric$bearing)
## summary
deg(circ.summary(bearing))
plunge <- rad(UA3c.fabric$plunge)
## summary
deg(circ.summary(bearing))
deg(circ.summary(plunge))
## mean
deg(circ.mean(bearing))
deg(circ.mean(plunge))
## dispersion
deg(circ.disp(bearing))
deg(circ.disp(plunge))
## Rayleigh test: test for unimodal departure from uniformity
## test of uniformity, assessing the significance of the mean resultant length
### assumptions: data are not diametrically bidirectional; data are unimodal (there are no more than one cluster of points around the circle)
### uses the Vector Magnitude L parameter, that makes sense only if the distribution of orientations is not bi- or plurimodal
r.test(bearing)
## omnibus Kuiper test
## one-sample test of uniformity on the circle.
kuiper(bearing)
## omnibus Watson test
## goodness of fit test for the von Mises (dist="vm") or circular uniform (dist="uniform") distribution
## If dist = 'vm', estimates of the population parameters are used to evaluate the von Mises distribution function at all data points, thereby arriving at a sample of approximately uniformly distributed data, if the original observations have a von Mises distribution. The one-sample Watson test is then applied to the transformed data as above.
watson(bearing, dist="vm")
## omnibus Rao's spacing test
## uses the space between observations to determine if the data shows significant directionality. If the data is uniform, observations should tend to be evenly spaced apart.
rao.spacing(bearing)
plunge <- rad(UA4.fabric$plunge)
bearing <- rad(UA4.fabric$bearing)
## mean
deg(circ.mean(bearing))
deg(circ.mean(plunge))
## dispersion
deg(circ.disp(bearing))
deg(circ.disp(plunge))
## Rayleigh test: test for unimodal departure from uniformity
## test of uniformity, assessing the significance of the mean resultant length
### assumptions: data are not diametrically bidirectional; data are unimodal (there are no more than one cluster of points around the circle)
### uses the Vector Magnitude L parameter, that makes sense only if the distribution of orientations is not bi- or plurimodal
r.test(bearing)
## omnibus Kuiper test
## one-sample test of uniformity on the circle.
kuiper(bearing)
## omnibus Watson test
## goodness of fit test for the von Mises (dist="vm") or circular uniform (dist="uniform") distribution
## If dist = 'vm', estimates of the population parameters are used to evaluate the von Mises distribution function at all data points, thereby arriving at a sample of approximately uniformly distributed data, if the original observations have a von Mises distribution. The one-sample Watson test is then applied to the transformed data as above.
watson(bearing, dist="vm")
## omnibus Rao's spacing test
## uses the space between observations to determine if the data shows significant directionality. If the data is uniform, observations should tend to be evenly spaced apart.
rao.spacing(bearing)
plunge <- rad(Elephas.fabric$plunge)
bearing <- rad(Elephas.fabric$bearing)
## mean
deg(circ.mean(bearing))
deg(circ.mean(plunge))
## dispersion
deg(circ.disp(bearing))
deg(circ.disp(plunge))
## Rayleigh test: test for unimodal departure from uniformity
## test of uniformity, assessing the significance of the mean resultant length
### assumptions: data are not diametrically bidirectional; data are unimodal (there are no more than one cluster of points around the circle)
### uses the Vector Magnitude L parameter, that makes sense only if the distribution of orientations is not bi- or plurimodal
r.test(bearing)
## Rayleigh test: test for unimodal departure from uniformity
## test of uniformity, assessing the significance of the mean resultant length
### assumptions: data are not diametrically bidirectional; data are unimodal (there are no more than one cluster of points around the circle)
### uses the Vector Magnitude L parameter, that makes sense only if the distribution of orientations is not bi- or plurimodal
r.test(bearing)
## omnibus Kuiper test
## one-sample test of uniformity on the circle.
kuiper(bearing)
## omnibus Watson test
## goodness of fit test for the von Mises (dist="vm") or circular uniform (dist="uniform") distribution
## If dist = 'vm', estimates of the population parameters are used to evaluate the von Mises distribution function at all data points, thereby arriving at a sample of approximately uniformly distributed data, if the original observations have a von Mises distribution. The one-sample Watson test is then applied to the transformed data as above.
watson(bearing, dist="vm")
## omnibus Rao's spacing test
## uses the space between observations to determine if the data shows significant directionality. If the data is uniform, observations should tend to be evenly spaced apart.
rao.spacing(bearing)
# mean
deg(circ.mean(rad(UB4c_test.fabric$bearing_clock)))
deg(circ.mean(rad(UB4c_test.fabric$bearing_comp)))
deg(circ.disp(rad(UB4c_test.fabric$bearing_clock)))
deg(circ.mean(rad(UB4c_test.fabric$plunge_clock)))
deg(circ.disp(rad(UB4c_test.fabric$plunge_clock)))
deg(circ.mean(rad(UB4c_test.fabric$bearing_comp)))
deg(circ.disp(rad(UB4c_test.fabric$bearing_comp)))
deg(circ.mean(rad(UB4c_test.fabric$plunge_comp)))
deg(circ.disp(rad(UB4c_test.fabric$plunge_comp)))
# uniformity tests
r.test(rad(UB4c_test.fabric$bearing_clock))
r.test(rad(UB4c_test.fabric$bearing_comp))
# mean
deg(circ.mean(rad(UB4c_test.fabric$bearing_clock)))
# mean
round(deg(circ.mean(rad(UB4c_test.fabric$bearing_clock))), 2)
# mean
round(deg(circ.mean(rad(UB4c_test.fabric$bearing_comp))), 2)
round(0.2759782, 3)
round(0.05437603, 3)
round(0.2427956, 3)
round(0.1060676, 3)
kuiper(rad(UB4c_test.fabric$bearing_clock))
watson(rad(UB4c_test.fabric$bearing_clock), dist="vm")
rao.spacing(rad(UB4c_test.fabric$bearing_clock))
kuiper(rad(UB4c_test.fabric$bearing_comp))
watson(rad(UB4c_test.fabric$bearing_comp))
rao.spacing(rad(UB4c_test.fabric$bearing_comp))
watson(rad(UB4c_test.fabric$bearing_comp), dist="vm")
watson(rad(UB4c_test.fabric$bearing_clock), dist="vm")
watson(rad(UB4c_test.fabric$bearing_comp), dist="vm")
rao.spacing(rad(UB4c_test.fabric$bearing_clock))
rao.spacing(rad(UB4c_test.fabric$bearing_comp))
watson(rad(UB4c_test.fabric$bearing_comp), dist="vm")
watson(rad(UB4c_test.fabric$bearing_comp), dist="vonmises")
watson(rad(UB4c_test.fabric$bearing_comp), dist="vonmises")
watson.test(rad(UB4c_test.fabric$bearing_comp), dist="vonmises")
bearing <- rad(Elephas.fabric$bearing)
## omnibus Watson test
## goodness of fit test for the von Mises (dist="vm") or circular uniform (dist="uniform") distribution
## If dist = 'vm', estimates of the population parameters are used to evaluate the von Mises distribution function at all data points, thereby arriving at a sample of approximately uniformly distributed data, if the original observations have a von Mises distribution. The one-sample Watson test is then applied to the transformed data as above.
watson(bearing, dist="uniform")
bearing <- rad(UA4.fabric$bearing)
## omnibus Watson test
## goodness of fit test for the von Mises (dist="vm") or circular uniform (dist="uniform") distribution
## If dist = 'vm', estimates of the population parameters are used to evaluate the von Mises distribution function at all data points, thereby arriving at a sample of approximately uniformly distributed data, if the original observations have a von Mises distribution. The one-sample Watson test is then applied to the transformed data as above.
watson(bearing, dist="uniform")
watson(bearing, dist="vm")
bearing <- rad(Elephas.fabric$bearing)
watson(bearing, dist="vm")
bearing <- rad(UA3c.fabric$bearing)
## omnibus Watson test
## goodness of fit test for the von Mises (dist="vm") or circular uniform (dist="uniform") distribution
## If dist = 'vm', estimates of the population parameters are used to evaluate the von Mises distribution function at all data points, thereby arriving at a sample of approximately uniformly distributed data, if the original observations have a von Mises distribution. The one-sample Watson test is then applied to the transformed data as above.
watson(bearing, dist="uniform")
bearing <- rad(UA4.fabric$bearing)
## omnibus Watson test
## goodness of fit test for the von Mises (dist="vm") or circular uniform (dist="uniform") distribution
## If dist = 'vm', estimates of the population parameters are used to evaluate the von Mises distribution function at all data points, thereby arriving at a sample of approximately uniformly distributed data, if the original observations have a von Mises distribution. The one-sample Watson test is then applied to the transformed data as above.
watson(bearing, dist="uniform")
bearing <- rad(Elephas.fabric$bearing)
## omnibus Watson test
## goodness of fit test for the von Mises (dist="vm") or circular uniform (dist="uniform") distribution
## If dist = 'vm', estimates of the population parameters are used to evaluate the von Mises distribution function at all data points, thereby arriving at a sample of approximately uniformly distributed data, if the original observations have a von Mises distribution. The one-sample Watson test is then applied to the transformed data as above.
watson(bearing, dist="uniform")
watson(rad(UB4c_test.fabric$bearing_clock), dist="uniform")
watson(rad(UB4c_test.fabric$bearing_comp), dist="uniform")
log(comp.s1_s2)
log(UB4c_comp.s1_s2)/log(UB4c_comp.s2_s3)
log(UB4c_clock.s1_s2)/log(UB4c_clock.s2_s3)
log(E.s1_s2)/log(E.s2_s3)
log(UA3c.s1_s2)/log(UA3c.s2_s3)
